[__]
[trash]

とあるタスク管理マニアの結論
 この読み物は結論である。
  私こと[吉良野すた]が、[タスク管理]について、出した結論である。
  私は[タスケニスト]であり、誰よりもタスク管理に向き合ってきた自負がある。そんな私が出した結論は、多くの人の役に立つであろう。そうでなくとも参考と刺激をもたらすはずだ。
  偉そう？良いではないか。この読み物は[Obfing]ベースなのだから。私が気持ちよく書けることが第一である。
  参考文献がない？エビデンスがない？そんなもの、あるはずがなかろう。タスク管理は実地的に発展している世界である。ここでも度々取り上げるが、タスク管理は本質的に個人的なものであるから致し方ない。体系化など難しいであろうし、冒涜とさえ言えよう。一方で、いつまでもとっ散らかったままでは一般人が立ち入れない。そこで、折衷案ではないが、タスケニストである私が現時点の結論を提供する。溢れんばかりの、タスク管理の本流を、しかと味わうといい。
  読みにくい？なんだこのフォーマットは？だからObfingであると言っておろう。慣れたら案外読みやすいから、慣れてみるが良い（私の文章力は棚に上げておく）。そういう意味で、この序文はテストとも言える。この序文を見て、あなたはこの読み物がこういうテイストであり世界観であるのだと理解できる。気に食わなければご退場されたい。
 基本的に万人向けに書いたものであるが、一部私の事例や思想を色濃く反映した部分もある。
  そのような部分は🐰の絵文字をつけた上でページ化している。
  例: [🐰なぜタスク管理をするのか]

[タスク管理とは何か]
[なぜタスク管理をするのか]
 [🐰なぜタスク管理をするのか]
[タスク管理は3種類ある(3Pモデル)]
[タスク管理の限界]
[繰り返し行うという営為]
[個人タスク管理に向いていない人]
[「やることが多すぎる」にも2種類ある]
[発達障害と個人タスク管理]

✅タスク管理のやり方は4種類ある
 2値を取る要素が2つあるため、計4種類となっている。
 まずアナログとデジタルがある。
  アナログとはここではデジタル（電子製品）の対義語であり、物――特に個体と液体を駆使することだ。というとなんだか仰々しいが、紙に書くとか、付箋を書いて貼り付けるとか、ホワイトボードに書いておくとかマグネットを配置するとか、手帳に書くとか、ファイリングするとか、積み木を重ねるとか箱からボールを出し入れするとか、挙げればきりがないが色々ある。直感的に扱えるのがメリットだが、修正や転記が面倒くさいというデメリットがある。
  デジタルは PC、スマホ、その他デバイスによって操作するものであり、アナログよりも多岐に渡る。カレンダー、タスク管理ツール、ファイルやカードといった情報単位とその単位を配置するボードやシェルフ（棚）やボックス（箱）の概念などが知られているだろう。修正や転記が楽で、かつ情報量を際限無く扱えるのがメリットであるが、非言語情報に頼った把握やシームレスな操作がしづらく、デジタルの流儀に基づいた訓練や順応を必要とする（「スキル」を要するほど習得コストが高い）というデメリットがある。
  どちらも一長一短であり、使い分けている者も少なくない。どちらか片方のみ使うように寄せたい場合は、相当な[盤外戦]が要求される。たとえば私はデジタルのみを使っているが、各種作業を PC でのみ行うよう生活を最適化している。スマホを持っていないし、PC の前に居られないよう仕事や生き方も選ばない。私はその気になれば 365 日 1 日と欠かさず、1日 8 時間以上 PC の前に座ることができる。このような生活に寄せている関係上、多くの選択肢と可能性を削ぎ落としてきた。逆に、デジタルに頼らずアナログに頼り切る場合、おそらく「デジタルだからこそ為せる情報の広さと深さを享受すること」を放棄することになろう。もっとも、IT についてけない老人などはこうなることも珍しくないが、それは既に手中に収めた境遇があるからこそ為せることだ。要するに、どちらか片方だけ使うのは極端な選択肢であり、普通は両方使うことになる。無理をせず、適切な方を使えば良い。
 それからロー（Raw）とフレームワーク（Framework）がある。
  ローとは、自分自身の手作業によりタスク管理を運用することである。
  フレームワークとは、既に構築された仕組みを動かすことでタスク管理を運用することである。
  両者に明確な境界はないが、どちらかといえばローとか、明らかにフレームワークとかいった傾向は宿るはずだ。
  一つ例を出す。アナログを例にする。タスクを毎回筆記用具などで書いたり、終わった後に打ち消し線を引いたりするのはローであろう。一方、ボードを用意して壁に貼り付け、「まだ」「終わった」の2領域に分割し、タスクを書いたマグネットを何十個と用意しておいて、終わったものを「終わった」側に移動させる……このような運用はフレームワークと言えよう。
  これらもまた、どちらも一長一短である。ローは使いやすく柔軟性にも富むが、手作業量が多くて面倒くさい。また記憶や意思などたかが知れているので、運用の質がブレやすい。フレームワークは逆に、その仕組みがサポートする範囲であれば手間なく安定的に運用できるが、そもそもつくるのが難しいのと、その仕組みで裁けない事象が出てきたときの例外対応に骨を折る。
  重要なのはローとフレームワークのバランスであろう。そして、最適なバランスは人によって異なる。私は「自分で作った道具を自分で使う」ことが好きなので、ローに寄せる。巷のツールはあまり知らず、半ば井の中の蛙であることを自覚しながら、あえて自分でつくったりもする。一方で、とにかくできるだけタスクを確実かつ素早くこなせるかどうかが正義という者もいよう。彼らにとっては誰がつくったとか使いやすいかとかは関係がなく、とにかく役に立つフレームワークが重要だ。そして、容易に想像はつくだろうが、両者は相容れない。あなたのバランスは、あなただけのものだ。他者に踏み込ませてはいけないし、逆にあなたも他者に踏み込んではならない。
 2要素の紹介を終えたので、本題に入ろう。
  以下の4種類が存在する。
   1 アナログ/ロー
   2 アナログ/フレームワーク
   3 デジタル/ロー
   4 デジタル/フレームワーク
  以降ではそれぞれに概要、具体例、メリデメなどを見ていく。ただし上述した2軸ごとのメリデメは割愛して、もう少し踏み込んだ議論をしたい。
 1 アナログ/ロー
  最も原始的なやり方であるとともに、最も始めやすいやり方でもある。
  具体例は右記のとおり。どこにでも売っていそうな日記帳や手帳全般、何度でも書けるお絵描きボードやホワイトボード（冷蔵庫に貼れる・吊せる程度の小さなもの）、ルーズリーフ、大学ノートなどノート全般、壁掛けカレンダー、[あな吉手帳術]など本格的な手帳、[バレットジャーナル]など本格的な手帳運営メソッド。
  メリットは始めやすさであろう。なにしろデジタルデバイスの練習も要らなければ、フレームワークの学習もしなくていい。何より安く揃えることができる。誰と何と比較することもないため心理的抵抗感も小さい。書ける道具を買ってきて、書き始めればもう始められる。幸いにも日本は識字書字の強い国なので、よほど特殊な境遇かあるいは障害者でなければ、それこそ誰でも始められよう。もっとも最近はデジタルネイティブというように、逆に抵抗感の強い人もいるかもしれないが。
  デメリットは[アナログローの壁]に阻まれることだ。素人がアナログローでタスク管理を始めた場合、たいていは「その場で思いついたタスクをメモする」の域を超えることができない。たとえば「直近一ヶ月に300個ほど存在するタスクをほぼすべて洗い出す」とか「それらを適切な日に配置する」とか「定期的に見返して実施順をコントロールする」とかいったことはできないだろう。必然、限界が来る。せいぜい買い物リストやちょっとしたTODO程度を捌くことしかできない（そして日常が慌ただしかったり資質的に向いてなかったりしてこれさえもできないケースもままある）。こういう壁はデジタルなどテクノロジーの力であったり、フレームワークなど仕組みの力に頼らなければ超えられない。下手すれば壁の存在に気付くことすらできない。
 2 アナログ/フレームワーク
  アナログローを仕組み化すると、このやり方になる。
   ちなみに上述した本格的な手帳系はフレームワークではない。手で文字を書くという手間や日付時刻を自動計算する・省力化するといった手間を脱せていないからだ。
  具体例は右記のとおり。マグネットを動かすだけで変えられる家事分担表、カレンダーに書き込まれた予定、カレンダーに貼り付けた「各種ゴミ捨ての日」を表す三色シール（可燃・資源・不燃）、「未着手」「着手中」「終了」の3列に区切られたボードと1タスク1付箋で記入された付箋群（いわゆるカンバンのようなシステム）、1タスク1マグネットシートで記入したシート群を冷蔵庫に四象限に分けて貼り付ける運用法。
  メリットはいちいち文字を書く手間を減らせることだ。最初に一通りつくる手間こそあるが、一度つくってしまえば、あとは移動させる程度の手間で済む。手間が小さいので、他者の協力も仰ぎやすい（特にパートナータスク管理で重宝するし、子供相手であれば実質これしか選択肢はなかろう）。
  デメリットは2つある。1 利用シーンが限定的であること。[ルーチンタスク管理]には強いが、それ以外には弱い。というのも、アナログフレームワークではどうしても「付箋やマグネットを移動させる」ような機構が必要となり、これは自宅のような広くて自由な場所でしか使えないからだ。ただし、[あな吉手帳術]のように、手帳内で頑張って実現しようとするものもある（付箋パッドという概念がある）。2 汎用的に設計されたものが中々無くて自力の探究が必要になりがちなこと。具体例で挙げたのは、私がこの場で見聞きしたものを思い出したり、考えたりして書いたものだ。市販されていたり、どこぞの有名人によって提唱されたりしたものではない。そのような権威的な製品はあまりない（私は一つとして挙げることができない）と思われる。よって、自力でつくって、使ってみて、また改良してといった試行錯誤がある程度は要求される。
 3 デジタル/ロー
  「文字入力」と「入力した言葉の操作」に重きを置くようなやり方になる。概念的な言い方をすれば、エディターや IDE といった道具を使って、行やファイルやページといった情報単位でタスクを書き、また操作をする。
  具体例は右記のとおり。[プレーンテキストタスク管理]、[Wiki As A TaskManagement]。
  メリットは動作の軽さと記入の自由度にあろう。まずプレーンテキストはコンピュータにおいて最も軽い情報形式であり、1行1タスクで書かれた10万行のタスクだって秒を待たずに扱える。記入のやり方も自由なので、自分のやりたい書き方をすればいい。
  デメリットは操作の自動化や視覚的な表示といったデジタルのお膳立てが皆無なことだ。たとえば「yyyy/mm/dd タスク名」というフォーマットで300行のタスクを書き並べているとして、これを日付昇順で並び替えるにはどうするか。手作業で頑張るしかない。無論、そんなことはバカバカしいので、スクリプトを書いたり、より本格的にあれこれしたいなら専用のプログラムをつくったりする。そうした物好きは世の中に一定数いて、ツールという形で公開されていたりもする。要するにデジタルなDIYをするか、他人のDIY成果物を調べて入手して試して理解して取り入れる努力をする必要がある。
 4 デジタル/フレームワーク
  いわゆるタスク管理ツールはここにあたる。
  具体例は右記のとおり。[Trello]のようなボード・カラム・カード式のもの。[Todoist]のように個人タスク管理に特化し[ルーチンタスク管理]も得意なもの。[Habitica]のように習慣や日課に特化したもの。[ルータム]のように[ルーチンタスク管理]に特化したもの。[ClickUp]のように多機能なもの。[TaskChute]のように自分のPCで使うもの（クラウド版の[TaskChute Cloud]もある）。他にも多数存在するし、2022/09 現在でも新しいツールがちらちら登場している。
  メリットは多くのタスクを扱えることであろう。複製、一覧、分類、フィルタリングやソートなどアナログでは気の遠くなるような作業もガシガシ行えるし、自分が抱えるすべてのルーチンタスク（通常20～40個/日になる）を扱うことも可能である。
  デメリットは3つほどあろう。1 習熟にそれなりのコストがかかること。2 デジタルツールであるがゆえに職場で使えない場合があること。3 [手段の目的化]が起きがちこと。
 この4種類は、1つだけ使うとは限らない。たとえば日常生活の家事雑務はアナログローで行い、仕事ではデジタルフレームワークを使うという二刀流もありえよう。一般的に[日常生活の家事雑務はアナログで管理するのが良い]ので、普段デジタルを使っている方は二刀流以上になるであろう。もちろん、あえてデジタルにこだわるのもアリだが、意外としんどいので注意。

✅GTDとタスク管理
 [GTD]とタスク管理の違いは何かとか、GTDにタスク管理をどう絡ませればいいのかとかいった話をよく聞く。
 そんなに難しいことではない。まずGTDはタスク管理ではない。というより、GTDは人生管理であり、タスク管理を含めることもできるという選択的包含関係である。選択的なので、不要だったりやりたくなかったりするのであれば別にやらなくてもよい。
 さて、GTDにどうタスク管理を絡ませるかだが、2通りであろう。
  1 [GTDプロジェクト]の管理をタスク管理で行う
  2 ネクストアクションをタスク管理で回す
 ---
 1 [GTDプロジェクト]の管理をタスク管理で行う
  プロジェクトという単語は多義語であるため、ここではGTDにおけるプロジェクトということでGTDプロジェクトと呼ばせてもらう。
  このGTDプロジェクトは、タスク管理で扱うこともできる。
  そもそもGTDプロジェクトとは、言ってしまえば「一回の行動では終わらない、でも年単位をかけて達成するほどでかくもないタスク」である。締切も存在する（なければ適当につくる）。よって、GTDプロジェクトとは「粒度が大きめの、締切のあるタスク」とでも言えよう。このようなタスクをタスク管理する、という話である。
  どうやるか。どうとでもできよう。必要そうな概念を挙げる。
    ページ(Page)。1-task 1-pageで扱うためのページが必要である。ファイルでもいいし、ツールがサポートするプロジェクトだとかページだとかいった概念でもいい。で、タイトル（ページ名）としてタスク名を書き、その内容に進捗や詳細を書き込んでいく。
    進捗管理(Progress-control)。このタスクはどこまで進んでいるかとか、あとどれだけやればいいのかとかいった進捗を把握することである。GTDプロジェクトは「やりかけ」になることが多いので、進捗を把握できないと再開しづらい。あるいは再開に必要な情報をその都度思い出す羽目になり面倒くさい。
    俯瞰(Plane-viewing)。多数のタスクを俯瞰する仕組み。最近更新した順で並べるとか、締切が近い順に並べるとか、進捗の小さい順から並べるとか、今週手を付けたタスクを並べるなど、切り口は無数にあるが、ともあれ俯瞰できねば全体像やヌケモレを把握できない。ちなみに、俯瞰するために[タスクの属性]が必要である。たとえば「最近更新した順」で並べたいのなら、「最近更新した順」を表現できる属性（おそらく「修正日時(Updated At)」であろう）をサポートする必要がある。
    状態(Status)。未着手、着手中、終了（ちゃんと終わった）、中止（失敗した）、中断（着手中から未着手に戻す）といった完了状態のことである。タスク管理は基本的に未着手を終了に導く営為であるため、GTDプロジェクトにおいてもこの状態という概念は必要である。状態ごとに俯瞰できればなお良い。
  これを私はPPPSと呼んでいる。この4つがあればGTDプロジェクト管理は間違いない。もちろん、このような管理そのものが本質的に高難度であることは申し添えておく。
  最後に一つだけ疑問に答えておこう。「階層構造や依存関係などの関係という概念は要らないのか？」という疑問だ。答えは「要る」「でも明示的に挙げるほどではない」である。関係という概念は、これだけで本何冊にもなるし一生遊べるほど奥が深いし、加えて向き不向きが人それぞれ状況それぞれである。仕組みとして組み込むのではなく、自分なりに適当に何とかすればいいですよー、くらいがちょうど良い。たとえば関連するGTDプロジェクトを一箇所に束ねて配置する人もいれば、タグをつけて後で検索できるようにする人もいるし、日本十進分類に挑むかのごとき厳密な階層構造をつくらんとする人もいよう。そうかと思えば、[Scrapbox]や[Obsidian]などで知られるように「ネットワークの島をつくっておいて」「検索や俯瞰でその一部にアクセスする」というやり方もある。そもそも、そういった関係をいちいち設定せず、頭の中で漠然と保持したりその場で適当に探したりして対処する人も多い。
 2 ネクストアクションをタスク管理で回す
  GTDには「ネクストアクション（次にやること）」という概念がある。その名のとおり、次にやることを扱った概念だ。といってもできることは一つしかなくて、次にやることを集めたエリアを用意して、普段の行動は常にここから選んでやれ、だ。
  そんなロボットみたいなことが（理屈はともかく）現実的にできるのか、というと、できる。タスク管理でできる。もっというと、これに最も適した手法は[リスト駆動生活]であろう。あるいは[トイボックス]を用いてもよいが、おそらく[忘迷怠]――特に迷と怠に勝てずに形骸化するだろう。「次にやることが集まったエリアを使って日常生活を回す」ためには、ロボットと揶揄される程度の強い仕組みは必要である。なんたって人間、意思はクソザコなのだから。もちろん、人によってはトイボックスの方が優れていることもあろう。ちなみに私は、自宅ではリスト駆動生活（Tritask）とトイボックスの折衷案のようなツールをつくって、それを使っている（[Todaros]という）。
  ネクストアクションをどうすればいいかと悩む人は多い。その度に私はリスト駆動生活を薦めるが、ウケは非常に悪い。しかし、ネクストアクションとはそういうものだ。現実を教えよう。GTDを行うとは、ロボットになることである。意思の弱い人間が、それでも何かを成す（Getting Things Done）ために、己を殺してロボットと化するのだ。答えはもう出ている。ロボットになることを受け入れよ、やれ、苦しんででも身につけよ。それをしない、あるいはできない人に、ネクストアクションを御する未来はやってこない。厳しいが、それが現実だ。ただし、すでに述べたように、トイボックスで済んでしまうこともある。

✅何でもかんでもタスクに押し付けない
 タスクという概念はある種汎用的であるため、迂闊に何事もタスクにしてしまいやすい。が、意外とタスクにできることは少ない。最もわかりやすい例は予定であろう。一般的に予定はカレンダーで処理するのが良い。これをあえてタスクリストで頑張る物好きはそうはいまいし、いたとしてもカレンダーの利便性を超えることはできないであろう。私も未だ超えたことはない。カレンダーは偉大な発明だ。嫉妬しちゃうのぉぉ。
 さて、ではタスクとして扱うべきでないものとは何なのか。これを私は[オルタスク]という言葉で整理している。Alternative Taskの略で、直訳すると「タスクの代替」とでもなろう。タスク管理ツールとは違う、別の何かで代替すべきというニュアンスを込めてみた。
 オルタスクは以下から成る。
  コンテナ
  イベント
  モットー
  メモ
  ソース
 コンテナとはタスクの入れ物を表した概念である。
  主な例はリスト、フォルダ、プロジェクト、グループ、ボード、カラムなどであろう。
  コンテナは純粋にタスクを包含・俯瞰するための機能のみを有しており、コンテナ自体はタスクではない。よって、タスクとして扱うこと自体が無茶である。たとえば task.txt に、1行1タスクで書き並べるシンプルなタスク管理を考えよう。ここにフォルダの概念を導入し、1フォルダnタスクを含められるとしよう。このとき、フォルダをどのように実現するか。
   ここで`<Folder> フォルダ名`とか`[フォルダ名]`とか`---- フォルダ名 ----`みたいな行を書くのはアンチパターンである。一行で書くというタスクのフォーマットは、タスクのみに使うべきである。コンテナには使うべきでない。「フォルダの概念を実現できるから良いじゃないか」と思うかもしれないが、おそらくあなたは間違っている。それで実現できているのはフォルダではなく[テリトリー]ではなかろうか。
   無論、テリトリーでもタスク管理は行えるが、タスク管理は論理的な世界である。座標とか配置とか空間とかいったビジュアルレイアウト的な概念は要らない……とまでは言わないが、付随品でしかない。もちろん、ビジュアルも大事であり、そこを好む人もいるだろうが、それ自体はタスク管理ではないし、[手段の目的化]も併発しやすい。
   ではどうするか。例を右記する。フォルダごとにファイルを分ける（`task_フォルダ名.txt`にする）、タスク名の先頭に`フォルダ名 >`をつける（[フラットコンテナ]という）、フォルダ名は[インデント]なしで書きタスク名はインデント1個をつけてぶら下げる。
   この例のように、タスクのレイヤーとは別のレイヤーで実現してみせることで、テリトリーの呪いから逃れることができる。一見すると面倒なことこの上ない（わざわざファイルが分かれていたり先頭に毎回付けたり）が、この方がタスクの包含関係を、メリハリを持って表現・操作できるのである。ファイル管理におけるフォルダもそうであろう。無限の広いデスクトップにファイルを散らして、関連ごとに固めて配置するテリトリーよりも、入れ物として関連を全部ぶちこんで見えなくし、必要なときに中身を開いてその中に専念する（潜る）モデルの方がやりやすい。だからこそ、ファイルシステムはあのようになっている。
 イベントとは[拘束]される事柄である。
  「予定」と言えばわかりやすかろう。そこで、ここではイベントではなく予定という言葉を使うことにする。
  予定とは時間と場所を拘束するものだ。もしあなたが予定を持つ場合、あなたはちょうどその予定が定める時間に、その予定が定める場所に赴かなくてはならない。早すぎても遅すぎてもダメだし、場所を間違えてもいけない。極めて負担の高い行為であるが、人間は動物と違わず非言語コミュニケーションを得意とし、また求める仕様なので、なかなか抗えない。よほど特殊な生き方でもなければ、あなたは予定から逃れられない。よって、他人事ではなく管理の術が必要である。「何を当たり前のことを」と思われるかもしれないが、[自覚は大事]である。
  なぜ予定はタスク管理で管理しない方がいいのか。理由は単純で、難しいからだ。まず予定は拘束が確定したものであるため「明日に回すか」みたいなコントロールができないし、予定の遂行中は（その予定によるが）制約もきつくタスク管理ツールを使えるとは限らないし、そもそも[予定の中身は粗いし可変であるため管理しづらく]て「拘束されている間はとりあえず費やす」という過ごし方しかできない。
  幸いにも予定を扱うのに適した手段がある。あえて言うまでもないが、カレンダーだ。
  とりあえず私が一つだけ申し上げるとしたら、「いいから予定はカレンダーで管理しろ」だろう。ここをタスク管理で頑張ろうとする者もたまに見受けられるが（私のことでもあるが）、おそらくその試みは成功しない。カレンダーという秀逸な人類の叡智は、一個人が敵うものではない。趣味なら止めはしないが、無謀なことはやめるのだ。ただし、あなたがそもそも予定をほとんど抱えないミニマムな人間であり、[プレーンテキストタスク管理]にも精通しているのであれば、[予定リスト]で事足りる可能性もある。それと、そもそもカレンダーを使おうとしない者もいるが、正直言って論外である。学習障害の算数障害であれば致し方無いが、そうでないなら、カレンダーを頑張って使えるようになった方がお得だろう。これ一つで予定の[忘迷怠]防止が手に入るのだから。
 モットーとは、ここでは「今後気をつけること」「今から抱える抱負」「格言」「金言」「モットー」といったものを指す。
  私たち人間は顧みることができる生き物である。振り返り、反省、内省などその手の概念は多数あるが、いずれにせよ、導いた結論を今後守り続ける（続けたい）という点で共通している。
  さて、このモットーを定着させるにはどうすれば良いであろうか。タスク管理でどうにかしたい場合、おそらくモットーを掲示し続けることになるであろう。たとえば「反射的にチャットの返信を書き殴るのをやめたい」というモットーがあったとすると、デイリータスクリストにその一文を書いておく。そうすれば何回も目にするため、定着するわけだ。……が、想像に難くないように、そんなに甘いものではない。モットーを定着させるには、その（モットーに基づいた）行動を行うべきタイミングが来た時に、漏らさず行う、という手順が必要である。タイミングに気づかないといけないし、気付いても素早く行動できねば意味がない。「あ、そういえばそうだった」などと忘れていては意味がない。かといって、「1日100回唱えよう」「何なら忘れないように "1日100回唱える" というタスクを登録しよう」などと力技に出たところで、できるようになるものでもない。もちろん、何もしなければ忘れる一方だ。このように、モットーの定着はとても難しいことなのである。私はこれを[格言問題]と呼んでいる。
  格言問題は、タスク管理では解決できない。なぜならモットーはタスクではないからだ。モットーは、発揮するべきタイミングを見だ覚めて適切に発揮するという「応用するもの」である。数学で言えば応答問題を素早く解くようなもので、適性が求められるものだ。さらにやる気という問題もまとわりつく。たとえば「別にやりたくないけど、やった方がいいモットー」を毎回実行するとは限らない、というのは想像に難くあるまい。あるいは「普段なら問題なくできるモットー」でも、イライラした状況下であれば投げやりになってしまうだろう。一度「やらなかった」という実績が出てしまうと、サボりは加速する――。このようなものを御する能力は、タスク管理にはない。だからモットーをタスク管理するのは諦めることだ。
  では、どうすれば格言問題に勝てるのか。タスク管理の領分を超えるが、その方法は……私にもわからない。むしろ私が教えてほしいくらいであるが、手をこまねいているわけにもいかないので検討はしている。[Redapt]と名付けて、鋭意取り組み中だ。
 メモとは「あとで読み返すもの」である。そのメモが指す内容の重要性や難易度はさておき、とにかく「あとで読み返す」目的で書いた言語情報であれば何であれメモである。ただし、あまり時間をかけないで書いた（書かざるをえなかった）というニュアンスが強い。
  さて、そんなメモであるが、タスク管理で管理することもできなくはない。早い話、Mというメモがあったとするなら、「M ← これを処理する」というタスクをつくればいいだけだ。たとえば[デイリータスクリスト]にでも書いておけば、今日中にどこかでまた目にするだろう。
  そう考えると、タスク管理で管理できそうな気もしてくるが、答えは No である。原因は単純で、物量が多く、内容の咀嚼も面倒くさいからだ。つまりは面倒くさい。もし1日20のメモがあったとしたらどうか。それはつまり毎日20のタスクが増えることにも等しい。今できないからと後回しにして、これも後回しにして……で、一日の終わりが近づいたときに、まだ10個くらい残ってるから明日にまわして……そんなことを繰り返していると、月に100個溜まっていた、などと収拾がつかなくなる。気合でその場で片付けるのも無理があろう。そもそも「今絶対にやる！」というほどのモチベがないから、あるいは「今は正直何も広がらないけど後で役に立つかもだから」と原石保存的な用途を決めるからメモをするのである。モチベ無き原石の集まりをガンガン捌けるほど人間は強くない。アイデアの文脈では周知の事実だろうが、だからこそ人は貯めるのだし、長時間をかけて[アイデアの3B]のようなシチュでひらめくのを待ったりする。
  では、メモはどう管理すればいいのか。端的に言えば[保存と読解の分離]であろう。これは 1 メモを素早く保存する、2 保存したメモを読み返して対処する、のこの2つのプロセスを完全に分離して運用するということだ。前者、1の方は、1つのメモあたり数秒から十数秒で済ませたい。これくらい素早くできねば、面倒や手間が勝ってしまい破綻（あるいは放棄）してしまう。これを端的に実現した概念が[インボックス]であろう。後者、2の方は、定期的に読み返すか、適当なタイミングで読み返すか、その両方を使うかがある。自分にあったやり方が良い。定期性に頼る場合は[GTDのレビュー]の概念が役に立つが、まめなので人を選ぶ（たとえば毎日、週に一度、月に一度にレビューするという習慣を構築できるか？）。あなたが選ばれない側の人間であるなら、適当なタイミングで読み返すだけで良い。全部のメモを処理はできないだろうし、処理のパフォーマンスも安定しないだろうが、それで良い。出来る範囲で、何もしなかった頃よりもマシであればそれで良いのだ。そもそもメモすらせずに機会損失を被っている人があまりに多い。メモを運用できているというだけで、あなたは頭が数個は飛び抜けている。
 ソースはタスクの源泉である。ソースだけだと多義語でわかりづらいため[タスクソース]と呼ぶことにする。
  たとえば[GTDの高度モデル]では5000m（哲学や価値観）、4000m（長期的に維持したいこと）、3000m（1～2年で達成したいこと）、2000m（[責荷]）といったものを扱うが、これはタスクソースであろう。これらそのものはタスクではない。また[PARAメソッド]では、プロジェクトという「粒度の粗いタスク」と区別する概念としてゴール（達成したいこと）や[AoR]（維持したいことや日課）などがあり、ゴールはプロジェクトと結びつけよだとか、AoRを日々眺めてプロジェクトを洗い出せと言っている。プロジェクトやAoR自体はタスクではない。
  両者に共通にするのは「タスクを生み出す元（Source ソース）となるもの」という性質であろう。一般化すると、目標事項と維持事項がタスクソースである。
  タスクソースをタスクとして管理するのは望ましくない。一年以内に本を一冊書きたいとして、じゃあ「本を書く」というタスクを扱うかというと、そうではあるまい。通常は「本を書く」はゴールの一つとした上で、ではゴールを満たすために何をすればいいかという戦略を考えるはずだ。この戦略として、サブタスクを洗い出して一つずつ消化する者もいるだろうし、「本を書く」という「毎日行うルーチンタスク」を入れておいて毎日何かしら進める者もいよう。もちろん毎日は厳しいから「休日だけ行う」ルーチンタスクにする者もいる。もう一つ、別の例として「健康で若々しい肉体を保つ」という維持事項があるとしよう。これもやはりタスクとして管理するべきではない。「健康で若々しい肉体を保つ」という項目がタスクリストにあったとしても、おそらく大したことはできまい。この事項はタスクソースとして定義しておき、日々のタスクリストには（健康で若々しい肉体を保つために必要な行動や振り返りを行う）具体的行動を入れるべきであろう。継続が必要だから、ルーチンタスクとして入れることになるだろう。あるいは、既に習慣や日課として定着しているのなら[無理にタスク管理する必要はない]が。

✅タスクと属性
 タスクとは論理的には[属性]から成るものである。
 属性を制する者はタスク管理を制すると言っても過言ではない。が、タスク管理ツール利用者が明示的に意識することは通常ないか、あるとしてもマニアだけである。一方で、これを意識し、自分なりに応用できれば一歩抜きん出ることができるため、余力があれば押さえていきたい。ちなみに、タスク管理ツールの開発者は、これは避けては通れない。ツールをつくるとは、属性として何を採用し、どの属性をどう見せるか・触らせるかの設計に他ならないからである。
 詳しい話は[属性]のページに譲ろう。

✅割り込みとの戦い方
 タスク管理と切っても切り離せないものの一つが「割り込み」であろう。いわば、せっかく人がタスク管理に乗っているのに、外からいきなり割り込まれて乱されるわけだ。腹立たしいことこの上ないが、そうも言ってられない。どう対処したら良いのであろうか。
 まずは「割り込み」とは何か、を把握したい。
  割り込みとは、タスクAに取り組んでいるときに、別の「無条件で切り捨てることのできない」タスクBが割り込んでくることだ。この無条件に切り捨てられないという点がポイントで、切り捨てられないからこそ、その場で相手せざるをえなくなる、だからウザイのである。逆を言えば、切り捨てられる場合は割り込みではない。人によっては難しくないだろう。たとえば声をかけられても気付けないほど没頭するなり、あるいは相手を人間扱いしないで無視するなりすれば良い。もちろん、肩を揺らされるなど強引なことをされたらさすがに無視はできなくなり、割り込みとなるが。
  割り込みには2種類ある。
   能動的な割り込み。自分以外によって引き起こされる割り込みである。
   受動的な割り込み。自分によって引き起こされる割り込みである。後述する（しかし一般的にはあえて言葉にするまでもなく知られている）「脱線」も、これに絡んだ行為である。
  割り込みに対処することを「後回し」という。要は今やっているAか、割り込んできたBか、どちらかを後回しにしなければならない。ここで「いやマルチタスクすれば両方できるよね」と思われるかもしれないが、[そこを突き詰めると哲学になる]ため割愛する。
   ちなみに筆者は否定派だ。 →[人間にマルチタスクは不可能だ]
  後回しの戦略も2種類あり、今やっているAを後回しにすることを「弱い後回し」といい、割り込んできたBを後回しにすることを「強い後回し」という。割り込んできた方を突っぱねる方が強い。
 ここまで知ると、割り込みとその対処方法の全体像が見えてくる。2種類と2種類があるので、計4種類――お馴染みのマトリックスをつくれる。
  1 「能動的な割り込み」を「強い後回し」にする
  2 「能動的な割り込み」を「弱い後回し」にする
  3 「受動的な割り込み」を「強い後回し」にする
  4 「受動的な割り込み」を「弱い後回し」にする
  ---
  これを[SWAPマトリックス]と呼ぶ。Strong(強い)、Weak(弱い)、Active(能動)、受動(Passive)から取っている。

✅タスクとレイヤー
 タスクにはいくつかレイヤーがあり、タスクの周囲にもいくつかのレイヤーがありそうだ――とは、誰もが一度は考えたことがある話題だろう。たとえば前者としてタスク、サブタスク、TOOD、アクションといった言葉が使われ、後者としてはプロジェクト、ゴール、マイルストーン、ビジョン、メント系（コミットメントやステートメント）などが使われている。「いやそんなの考えたことがない」という人でも、おそらく無自覚のうちにこれらの概念を使い分けたり、使い分けに疑問を抱いたりしてきたはずだ。このあたりのあり方をレイヤー体系と呼ぶとしよう。タスク管理におけるレイヤー体系は、どうなっているのであろうか。
 結論を言うと、人それぞれである。人によって、どの程度の解像度で捉えるのがベストかが異なるため、一概にこれが正しいとは言えない。それも正しいし、あれも正しい。しかしながら、おおよその共通解はあるため、以降は私なりに導いた共通解を述べるとする。
 以下を参照。
  [ATGVモデル]
  [タスク管理ピラミッド]

講義『タスク管理』
 全15回でお届けする感じ
 scrapboxのpresentation modeで、実際に俺が大学生に講義するつもりで望む
 90分フルに使う必要はない。30分くらい使って、あとは質問に答えるとかすればいい。というシチュ。
 [講義「タスク管理」]

モード
 管理モードと行動モードがある
 それぞれにサブモードがある
 コンテキストもからめて説明したい。あとコンテキストのページ、そろそろ埋めていきたい……

