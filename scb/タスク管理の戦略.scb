[個人タスク管理]をおおよそどのように行っていくかという戦略にはパターンがある。
 いくつか紹介しよう。
 これらの発想を参考にすることで、あなたは一から試行錯誤しなくても済む。もちろん、だからといって試行錯誤がなくなるわけではない（[タスク管理は本質的に個人的なもの]である）。
 これらは不可分ではなく、二つ以上を使い分けたり組み合わせたりする場合もありえる。

---

まずは俯瞰してみよう。

何を拠り所にするか
 時間で区切る
  Dailer
  Calendarer
  Slotter
 話題で区切る
  Issueist
  Topician
 一箇所にまとめる
  Richild
  Monolith
 繰り返しの力で回す
  Robot
  Tracker
 自分の脳内が正義
  Inboxer

習熟コストの高さ
 Lv4
  Robot
  Dailer
 Lv3
  Slotter
  Issueist
  Topician
 Lv2
  Calendarer
  Tracker
  Richild
  Monolith
 Lv1
  Inboxer

私の体感による人口
 多い。一般人でもよく見かける。
  Calendarer
  Richild
  Inboxer
 少ない。が、ナレッジワーカーやクリエイターには珍しくない。
  Dailer
  Slotter
  Monolith
  Tracker
 かなり少ない。希少種。
  Robot
  Issueist
  Topician

---

続いて各々をかんたんに紹介しよう。

デイラー
 Dailer
 [デイリータスクリスト]など今日やるエリアをつくり、その中にあるタスクを全部やれば今日はおしまいとする。明日以降のエリアも併せてつくることが多い。
 作家、芸術家、フリーランスなど裁量の大きな者はこれになりがち。
 メリットは日単位で区切りやメリハリをつけやすいことと、先送りしやすいこと。
 デメリットは毎日メンテが要ることで、状況がビジーだと機能しなくなる。

インボクサー
 Inboxer
 inbox（未消化のブツを溜める）だけ使うというシンプルなスタイル。自分でメモをするというよりも、メールの受信箱やチャットのブックマークなどツール側のスター[属性]相当の機能を使うことが多い。
 偉い人（権力を持っていて忙しい人）はこれになりがち。
 頭の良さと迅速な処理（なるべくその場で片付けたりボールを返したりする）が必要。[タスク管理の委譲]も兼ねている事も多く、その場合は委譲できるだけのサードパワー（権力や経済力）も必要。
 メリットはやり方が限りなくシンプルであること。
 デメリットは一つ一つのタスクを熟考する暇がなく、場当たり的表面的に数をこなすだけの機械になりがちなこと。別の言い方をすると、（この状態を支えるための「人並以上に儲かっている」「貢献している」といった）外発的動機が必須であること。そもそも自分の頭とサードパワーに依存することもあり、シンプルすぎる見た目以上に人を選ぶ。

カレンダラー
 Calendarer
 TODOリストのようなリストをつくるよりもカレンダーに頼り、とにかくカレンダーに書いてそのとおりに行動する。いわばカレンダー駆動ロボット。
 会議の多いホワイトワーカー（特に管理職以上）はこれになりがち。
 カレンダーに載らないタスクはベストエフォートになる。確信犯的にスルーすることも多い。
 メリットは使いやすいこと。無能でも比較的手を出しやすく使いやすい。なぜならカレンダーを使えばいいだけなのと、限界が時間単位で可視化されるがゆえに「これ以上は入らないから」と断りやすいからである。別の言い方をすると、生産性や効率を上げたり[盤外戦]をしてタスクの物量そのものを減らす努力をしたりといったことをしなくてもいい。
 デメリットは主体的になれないこと。早い話、予定に振り回されたり、予定を消化するだけの機械と化したりする。[Meeting_Driven_Workstyle]がまさにそうであろう。

スロッター
 Slotter
 学校のように時間割を組んで、各タスクはその時間内でのみ行うというスタイル。別の言い方をすれば、スロットという「枠」で区切るスタイルとも言える。スロットの長さは重要ではない（時単位である必要はない）。
 やること（特に[オーバーウォント]寄り）が多い者はこれになりがち。というのも、多くの「やりたいこと」を消化していくためには、広く手を付けていく必要があり、ではどうやるかを考えると、自然と「時間で区切って割り当てていく」やり方に収束していくからである。
 細かいやり方は様々である。予定が多い者や受動的な者はカレンダラーにならないと成立しないが、そうでなければカレンダーに頼る必要はない。[タイムボックス]や[ポモドーロテクニック]など、これを支援するテクニックも数多くある。
 メリットは広く浅く満遍なく、それでありながら無理なく（1日24hの時間資源をやりくりするのでオーバーしない）タスクを消化していけること。
 デメリットは人間味（深く考えずダラダラと無為を過ごす）がなくなること。スロットどおりの行動ができるかどうかが争点となってしまい、できない場合にストレスが溜まる。どころかその通りに行動しようと日々努力していること自体がストレスになっている可能性もある。

リッチャイルド
 Richild
 必要なタスク――特に[物タスク]やファイルや画像など「タスクを想起するもの」をそばに置いておいて、動的に使い分けたり切り替えたりするスタイル。裕福な子供が広い部屋でおもちゃを散らかしているイメージであり、部屋やデスクを散らかしたり、デスクトップをファイルで散らかしたり、ホワイトボードを常設しておいてとにかくメモしたりといったものがこれにあたる。
 特定の特性を持つ者がこれになりがち。具体的には[個人タスク管理に向いていない人]や[ADHD]などである。
 メリットは、通常のタスク管理が行えない者でもある程度は行えるようになること。
 デメリットは、そうは言ってもカバーできる範囲に限りがあること。たとえば自分一人で一週間の間、一度も誰からも怒られず（何のタスクも漏らさず）過ごすことは不可能であろう or 相当な努力が必要である（[発達障害と個人タスク管理]）。加えて、部屋やデスクを物理的に散らかし、論理的にはタスク管理ツール上も散らかしてしまうため、共同で過ごしている者から反感を買いやすいこと。

ロボット
 Robot
 [ルーチンタスク管理]にて日常生活を回す。何を、どれくらいの頻度で、いつ（の時間帯に）行うかを全部管理しており、今日は今日行う分だけやれば良いという境地に至っている。
 やること（特に[オーバーマスト]寄り）が多い者はこれになりがち。というのも、多くの「やらなければならないこと」はどう足掻いても消化する他はなく、ならばいかに効率的に消化するかを考えるしかなくなるわけだが、その行きつく先は己の[ルーチンタスク]の把握だからである。また、[ASD]などマイルールや規則に従って動くことを好む特性の者にも刺さる。
 管理のやり方については色々ある。ルーチンタスク管理を行うツールを使う、何曜日に何をするかという時間割のようなものを壁に貼り付けておく、「タスクAとして行うこと」のようなチェックリストを多数用意して日々使い分けるなど。
 「今日行う分」をどう管理するかについても、やり方が分かれる。大別すると管理しない（頭の中で適当に優先順位付けする）派とデイラー派がいる。
 メリットは、自分が抱える全てのタスクを自分にとって最も自然に（快適かつ効率的に）消化できるようになること。
 デメリットは疲れること。とにかく[認知資源]を多用するため、おそらく一日と保たないであろう。夕方にもなれば「やる気が出ない……」と憂鬱が襲う。オーバーマストであれば心身を奮い立たせられるが、そうでなければ怠けるであろう。

イシュイスト
 Issueist
 GitHub Issuesなど[BTS]を使う。1タスク1チケットでとにかくチケットを切り、[属性]を細かく付けることで俯瞰や検索やフィルタリングをしやすくする。
 元がプロジェクトタスク管理用ツール、特にソフトウェア開発におけるツールであることもあって、イシュイストはソフトウェアエンジニアに多く見られがち。
 メリットは、普段使っているツールの延長でタスク管理が行えるというシームレスネスがあること。
 デメリットは、あまり細かい管理や多数のタスクを扱うことができない（ことはないが[操作コスト]が馬鹿にならず非現実的）こと。たとえば毎日行い習慣を扱ったり、1日20以上のタスクを扱ったりといったことは難しい。必然的に「仕事に関するタスク」ばかり扱うことになるし、日常生活のタスクも扱ってみても結局全部を扱いきれず形骸化する。

トピシアン
 Topician
 [Wiki]を使う。Wikiは元々ページをつくってリンクで繋げるシステムであり、タスク管理というよりは情報管理だが、ここにタスクを入れればタスク管理もできる。
  情報管理に傾注する者はこれになりがち。
 やり方は様々である。具体的には1タスク1ページで表現する。無論、ページだけでは管理機能が圧倒的に足らないため、何らかの形でカバーする必要がある。たとえば私の[sta-scb]は箇条書きとリンクの世界であり、[howm]はリンクとリマインダーの世界である。前者は[VScode]を使うが、後者は[Emacs]を使う。どちらも全文検索が使える（howmの方がシームレスであり手に馴染みやすい）。また、ScrapboxなどSaaSのWikiを使うこともできる（Scrapboxの場合、カバーは「UserScriptによるタスク管理機能の自製」となろう）し、Wikiではないがアウトライナーでも可能だ。ちなみに[PARAメソッド]もこれにあたる。
 メリットは、普段愛用する情報管理の延長でタスクが行えるというシームレスネスがあること。
 デメリットは、タスク管理機能が乏しいゆえに自製や改造が必要であること。また、このスタイルはしばしば自作を伴うため「不便という事実があるのに、自分がつくったものだからとあえて使い続ける」という[手段の目的化]も起こりやすい。そういう意味では、便宜よりも自己満足を第一にするスタイルと言っても良いかもしれない。

モノリス
 monolith
 ある一つのファイルやページなど、一つの領域だけで完結させる。
 どのやり方にも馴染めない不器用な者あるいは気難しい者はこれになりがち。というのも、このスタイルはインボクサーほど割り切れず、デイラーほどメリハリもつけられず、トピシアンほどシームフルになれず、リッチャイルドほどシームレスにもなれないという中途半端な立ち位置だからだ。それでも、ハマる人にはハマる。ただし、「単に他のやり方を知らずにこのスタイルになっていただけ」というパターンもあり、その場合は他のやり方を知るだけであっさり卒業する。
 やり方は色々考えられるが、たとえばtask.txtをデスクトップに置いたり、ディスプレイの周囲に付箋を貼り付けたり、大きな紙を用意してそこに書いたりする。いずれにせよ、共通するのは「その領域ただ一つだけ使っている」という唯一性である。また、何をどう書くかも自由だが、1行1タスクで書き並べるようなリストを伴うことが多い。付箋のような空間式もありえないことはないが、おそらく続かない。このスタイルは、雑多なメモを雑に、しかし逃さず扱える能力が求められるため、空間式だと（細かい情報をたくさん書きづらいがゆえに）破綻しやすい。自然とリスト式に収束していくであろう。
 メリットは、やりやすいこと。一つの領域内を、自分なりに試行錯誤しながら使っていくだけでそれなりに回るため、運用しやすいのである。
 デメリットは限界に直面しやすいこと。タスク管理はそんなに甘くはなく、単一領域かつ自分の試行錯誤のみだとカバーできることはそんなに多くない。井の中の蛙となって自分のスタイルに浸るか、そうでなければ普通は（他にもっと良いスタイルがあるため）卒業する。

トラッカー
 Tracker
 タスクを「継続的に取り組むもの」と解釈し、それらに毎日取り組んだかどうかを管理する。
 日課や習慣の管理・定着を重視する者はこれになりがち。
 管理対象として主に日課や習慣が選ばれる事が多い。まさにその用途でつくられたのが習慣トラッカーであり、一大ジャンルとなっている。管理対象数を絞ればアナログでも実現でき、たとえばラジオ体操カードは有名であろう（ラジオ体操に参加するという一つのタスクのみ管理している）。
 メリットは日々の運用がしやすいこと。やったかやらなかったをプロットするだけである。
 デメリットは、まず扱えるタスクの幅が狭いこと。特に単発のタスクは管理しづらく、「単発タスクエリアを空にする」のような工夫した運用が必要となる。次に[スケールしない]こと。タスク数が5～10程度ならまだ回せるが、それ以上を超えると[認知資源]の負荷が爆発的に増え（そもそも物理的に入りきらなくもなってもくる）、すべてを漏れなくこなすことが難しくなり、[スキップマネジメント]を考える必要性など込み入った運用が要求されてくる。そもそも、トラッカーにタスク管理をまかなえるほどの能力は無く（無いと考えられており）、だからこそ習慣トラッカーの域を出ていない。
