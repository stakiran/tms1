
code:bnf2
 <page> ::= <nodes>
 <nodes> ::= <node> <nodes> | ""

 <node> ::= <block> | <line>
 <block> ::= <codeblock> | <tableblock> | <quoteblock>

 <line> ::= <indent> <inline-elements>
 <inline-elements> ::= <inline-element> <inline-elements> | ""
 <inline-element> ::= <plain> | <link> | <image> | <literal>

 <indent> ::= " " <indent> | ""
:c

code:bnf1
 <page> ::= <nodes>
 <nodes> ::= <node> <nodes> | ""

 <node> ::= <block> | <line>
 <block> ::= <codeblock> | <tableblock> | <quoteblock>

 <line> ::= <indent> <inline-elements>
 <inline-elements> ::= <inline-element> <inline-elements> | ""
 <inline-element> ::= <plain> | <link> | <image> | <literal>

 <indent> ::= " " <indent> | ""
:c

データ構造
 ルート
  class Page
   nodes: Node[]
 行はノードとして扱う感じ
  class Node
   indent: number
   content: Line
   children: Node[]
 1行内にはnのインライン要素があるという感じ
  class Line
   content: InlineElement[]
 インライン要素は色々あるので、基底を定義してこれを実装させる
  interface InlineElement
  class Plain
  class Link
  class Literal
  class Image
  class CodeStart
  class InCode
  class CodeEnd

目的は？
 1 この読み物をHTMLで公開するために、変換をつくること
 2 scb記法一般について、1ができるようにしたい
 3 クラインなどよく使う概念も取り込んで、プログラムで扱いやすくしたい（漠然！）
 ---
 fimp🐰
  3は[手段の目的化]感
  できれば2が欲しい。この読み物以外にもscbは結構使っているし、手元で書いたのを公開したいときとかにこれがあると仕事でも便利だろうから
  が、直近は1でもいい。だらだらしても仕方ないし、2はscb記法ちゃんと考えて変換もちゃんとつくるってことだから一朝一夕ではない。1でいいのでは？
  

引用はどう表現する？
 ブロックでいい🐰
  最低でも行まるごとになる。これは1行からなるブロックとみなせる
  そもそも引用記法は本来はブロック的だよね
   ただ先頭に`>`付ける書き方が楽だからそうなってる（インラインっぽく感じる）だけで
 いや、いいの、か……？
  でもinlineにする場合、indentみたいに「先頭につける」性質があるから、また特殊なんだよなぁ
  愚直にやるならinline, frontline, backlineと3パターンサポートする羽目になる🐰
   そして構文的にはこれが正しい
   実際、scrapboxでも引用表記の中にリンクとか書ける。これはinlineとfrontlineが同列だからだ🐰🐰

クラインは？
 scbを扱う上で俺がかなり意識している概念
 サポートしたい
 Blankみたいな概念がある？
  Nodeと同列の概念で、n行の空行を表現する
  Pageとは、NodeとBlankからなるリストと呼ぶことができる
  ……いや、Nodeの中にBlankを入れればいいのか🐰
 そしてBlankも二つあるけど
  indent=0のblank
  indent>0のblank
  つまりどこで（どの階層で）区切っているかが違う🐰

ネストはどう表現する？
 Nodeにindent: numberを持たせる、ではダメなんだっけ？
 問題ないだろ🐰
  懸念してた「並び替え操作しやすくする」は、リストの操作の話なのでここじゃねえし
  ネストの付け方に制約はないので、ポリシー的なものを搭載する必要もない
   別に
          こんな風に
     1段ずつネストせず一気に
      飛ばしたっていいんだし
 本当に？🐰
  HTML側はそれじゃ表現できなくね？
  1段ずつの構造であるべきじゃね？
  じゃあ1段ずつが守られてないscbがあったとして、どうするの？
   エラーにする？うそぅ？
   どう見せるかは中間言語使う側が考えることだろ🐰
    HTMLを使う場合、HTMLでは使えないので「preで見せるか」とかやればいい
    あるいはscrapbox-reader的に行指向にしてもいいし
 ---
 Nodeとして「List」をサポートする案は？
  より木構造的になる
  いや、indentわからん（いちいち木を走査して深さを計算する必要がある）くてだるいよね
  メリットは、
   並び替えするときにList Nodeまるごと移せばいいだけになるので楽
  が、やっぱりNodeではない気がするなぁ
   BlockもListの性質を持つときがある。並列ではない
  いや、やっぱり扱いたいですよねぇ
   一貫したデータ構造にしたい🐰
  before
   `<node> ::= <block> | <line>`
  after
   ？
  block, list, line
  listはlistblock？
 要らんだろ。並び替えはしないよね🐰🐰
  今ここで検討してるのはただの変換だ。
 ---
 いや、行指向で行こう
  HTMLなど変換先側の言語がネストに対応しているとは限らない
   いや、それをいうならそもそもリストの中にブロック持たせる、自体がHTMLは対応していないが……ｗ
  ので、見かけ上はフラットな構造で持たせておいて、インデントはプロパティとして持っておいて各自解釈してよしなにしてもらう
   つまりインデントという「構造を示した値」があるので、それで表示を微調整してくれ、と（scrapbox-readerのやり方）
  page
   node(indent=0)
   node(indent=0)
   node(indent=1)
   ...
 

パース
 一行目から静的に行単位でパースする、でいいんだっけ？🐰
 良いでしょ
  ただ、ブロックの解釈時は、始点見つけたら終点まで一気に解釈して、続きはその後ろから、って感じになるはず🐰
 1 まずはnodeレベルでリストつくる
 2 その後、node各々をinlineレベルでリスト化する

✅ブロックはどう表現する？
 中間言語としては、いちいちstart/in/endなんて意識したくない
 nodeレベルにすることにした

✅react使うかで悩んでいる構図
 inbox
  React側 まずは二行の箇条書きを表示する程度でつくればいいのでは
  スクボきほうのデータを直にフロントにもたせてしまうか、中間言語まではパイソンにするか。後者かな。他にもパイソンは使いそうだし。中間言語to、のひとつをリアクトでつくる。インポートするファイル(中間言語データが書かれている)を直につくりたさ……が、なんか微妙。前者でつくりきる方がいいか？もうひとつのコンポーネントにしちゃうとか
 もうフロントにデータ載せて動的に描画するのもアリか？
  いわゆるCSR、client side rendering になるのか？
  Reactって使える？
   使える
   まさにrender()の中でhtml文字列つくってるじゃんね🐰
 ---
 まとめると、
  scb to 中間言語はn言語でつくれる余地がある
   js
   py etc
  中間言語 to HTMLは以下のアプローチが考えられる
   1 何らかの言語でコマンドをつくる
   2 何らかの言語が読める形式に変換し、それを使ってその言語でツールをつくる
   で、react使う案は2になる
    scb to 中間言語して、
    中間言語データを、jsで読める形式にしてreactのpjに入れる
    あとはreactでよしなに、みたいな🐰
 どうしたい？🐰
  reactは何もわからないし、学びながらはきついので、いったんなし
  どちらかと言えば今後のためにもscb to HTMLが欲しい
   コマンドがあるといい
   慣れたpythonで良い

✅scb to 中間言語変換をつくる
 まずはこれをつくる
 で、その後、中間言語 to HTML とか、to Markdownとかすればいい
 中間言語の表現力は、まあHTML相当で良かろう🐰

✅ghpaages or vercel
 docs/ 配下の github pages でいい
  github actions
  面倒くさそうならvercelに逃げる🐰

✅阿部寛レベルの軽いサイトにしたいかも
 [阿部寛ウェブサイトのHTMLソースを見る]
 cssでbulletを消す、マージンとかも調整する
 scrapbox-readerどうしてるっけ？
  [scrapbox-readerを読む]
  ` <div style="margin-left: XXXXem;" class="line">XXXX</div>`でしたわ
  良いアイデア🐰
   これなら箇条書き内にコード記法、も表現できる（コード記法みたいな装飾で見せればいいだけ）
   そもそも箇条書き(ul and li)使わなくなるわけだし
