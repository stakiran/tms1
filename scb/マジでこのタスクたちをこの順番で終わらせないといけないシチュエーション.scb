例
 一週間後までにやらないといけないタスクTがあります。
 闇雲に取り組んでも勝てそうにありません。どうしましょうか。
 こうしましょう。Tを分解してサブタスクにして、このサブタスクたちをこの順番で実行していけば最終的にTが終わる、という形にするのです。幸いにも、Tは物量が多いだけで、分解自体は行える程度の難易度です。またサブタスクたちも「やればできる」「大体どれくらいかかるかもわかる」程度の難易度です。つまり自分にとって、このTは創造や試行ではなくただの「作業」です――。
 
 たとえば34個のサブタスクが出来上がったとする。
  subtask1
  subtask2
  subtask3
  ……
 自ずと「各サブタスクの所要時間」、つまり見積時間属性も見えてくるはずだ。
 そうしたら、あとは上から順に「開始」「終了」、を繰り返すだけで良い。終了時に終了時間と開始時間の差を見れば「実績時間」がわかろう。見積はもう出しているので、見積との乖離もわかる。進んでいるか、遅れているかがわかるのだ。進んでいるなら休憩ができようし、遅れているならペースを上げねばなるまい。
 そもそも各サブタスクの開始時間と終了時間を順に足していけば、「一番最後のサブタスクがいつ終わるか」もわかる。無論、1日で全部終わるのはキツイから適当なところで区切るわけだが、そうするとたとえば「subtask8を終えた段階で18:20になる」といったことがわかる。1日目は18:20に終わるはずだ、というゴールを設定できるわけである。これは心理的にとても励みになる。もちろん、同時に残酷な現実でもあるので「subtask7が終わるのが23:27」だとしても、頑張らなきゃいけない。

この例に対するアプローチは、まさに[TaskChute]が得意とするところである。作者の大橋は、会社員時代のマニュアル作成でまさにこのようなシチュエーションに遭遇し、同様の考え方で切り抜けたそうである。
 [タスク管理ツール・TaskChute2 https://cyblog.biz/pro/taskchute2/index2.php]
