タスクの属性とは、タスクが持つ特徴である。
ただし関係と機能は含めない
 →[タスクを構成する3つのA]

属性の概要
 まずは例を挙げよう。
  「9月9日に行いたい、30分くらいかかる買い物」というタスクがあったとしよう。
  このとき、以下はいずれも同じ表現である。
   買い物
   2022/09/09 買い物
   買い物 2022/09/09
   2022/09/09 買い物 ~30
  それぞれ以下の属性を持っていると言える。
   >買い物
    名前
   >2022/09/09 買い物
    実行日、名前
   >買い物 2022/09/09
    名前、実行日
   >2022/09/09 買い物 ~30
    実行日、名前、見積時間（30分くらいかかる、の意）
 属性とは、タスクをタスク管理ツールで扱うために、タスクから切り取った特徴である。
 切り取り方は色々ある。
  「買い物」は名前だけを切り取っており、最もシンプルであろう。いわゆるTODOリストもこれである。が、既にご存知のとおり、これだけでは多数のタスクを管理できない。
  では「2022/09/09 買い物」はどうか。実行日（そのタスクを行う日）という形で「いつ行うか」を切り取ったのは賢いと言えよう。これなら、仮にタスクが100個あったとしても何とかなりそうだ。というのも、今日は実行日が今日になっているタスクだけ済ませれば OK だからである（つまり[デイリータスクリスト]の概念を実現できる）。もちろんその今日のタスクが100個だったらどうしようもないが、7個とか10個とかなら、まだ何とかなるのではないか。ちなみに「買い物 2022/09/09」も同じであるが、ただ属性の順番が違うだけである。どちらでも良いが、たとえば[プレーンテキストタスク管理]と相性が良いのは前者（日付が先）であろう。並び替えを行えば日付順で綺麗に並んでくれるからだ。
  もう一つ、「2022/09/09 買い物 ~30」は、属性が3つもある。「何分くらいかかりそうか」という特徴も切り取っていることがわかる。このような属性は見積時間とか見積と呼ぶ。何分かかるかを見積もっているわけだ。これも実行日と同様、タスクが多数存在擦る場合に便利となる。たとえばあなたに26分のスキマ時間が出来たとする。タスクの一覧を見て、26分に収まる（見積の合計が26分以下）ように選べば良い。もちろん見積どおりに終了できるとは限らないが、何もないよりは読みやすい。そういうタスク管理を続けていけば、見積の精度も上がるだろう。
 このように、どんな属性を採用するかによって、タスクの扱いやすさが異なってくる。属性があればあるほど「扱い方の多様性」も広がるわけだが、一方で、多機能すぎてごちゃごちゃするリスクも孕んでいる。そもそもツールというのはよく使う部分とそうでないものが出てくるものであり、無闇に属性を増やすのは得策ではない。心は踊るかもしれないが、管理には何ら貢献しない。
  もちろん、明確な設計思想があって、あえて多くの属性を採用したツールもある。たとえば[TaskChute]はそうであろう。いちいちあれもこれも記入させられて非常に面倒くさいが、その代わり、自分の生活のほぼすべてを記録に残すことができる。苦しんだ見返りとして、自分の行動を客観的データとして残せるのである。データが残れば考察ができる。分析ができる。作戦を立てることもできよう。闇雲ではなく、たしかなデータに基づいた改善に着手できるのである。
  あるいは、色んな人の色んな用途を想定するために、あえて多機能にして間口を広げているケースもある。[GitHub Issues]はそうであろう。これはプログラマ向けの課題管理ツールであるが、担当者、ラベル、プロジェクト、マイルストーンといった属性がサポートされている。ラベルを使えば好きなタグを運用できるし、「誰が」基点で管理したいなら担当者が使えようし、もちろんラベルと担当者を組み合わせても良い。ラベルが要らないなら使わなければ良い。他にも、ビジネスで使われる本格的なツールはこの傾向が強い。仕事は本質的に複雑であり、これと向き合うためには色んな観点が要るものなのだ。少量の属性を採用したスマートなツールだけでどうにかなるほど、ビジネスは甘くない。もっと泥臭いのだ。泥臭く使えるポテンシャルが要るものなのだ。
 タスク管理ツールに慣れたければ、属性に注目すると良い。
  ここまで述べたように、タスク管理ツールとはタスクの特徴を属性という形で切り取ったものだ。属性を見れば、そのツールがどういうコンセプトで何をしようとしているかがわかるであろう。あなたはその匂いや雰囲気に従えば良いし、そんな素直な歩み寄りは、理解や習熟を早めてくれる。
  あるいは、一見すると多機能で意味不明なツールであっても、「私はとりあえずこれが使えればいいや」と取捨選択できるようになる。多機能で人気のツールは、やはり出来が良いから、多機能すぎてよーわからんと捨てるのはもったいない。

属性の大別
 大別の名前、概要、一例を与える。
 ---
 記述系属性
  タスクの内容(言葉で記述されているもの)
  名前(Name/Title)
  詳細(Description)
 状態系属性
  タスクの状態
  状態(Status)
 識別系属性
  タスク個々を区別するための情報
  ID
  番号(No/Number)
 日付系属性
  タスクに紐づいた日付
  実行日(Execution)
  作成日(Creation)
  締切日(Due/Expiration)
  完了日(Completion)
 時刻系属性
  タスクに紐づいた時刻または時間帯
  開始時間(Start)
  終了時間(End)
  [セクション](Section)
  見積時間(Estimate/Expect)
  実績時間(Actual)
 定期系属性
  ルーチンタスクに紐づいた出現頻度設定
  繰り返し頻度(Frequency)
  繰り返し条件(Condition)
 分類系属性
  タスクの性質(ラベルの形で1つまたはnつ付与されたもの)
  カテゴリー(Category)
  ラベル(Label)
  タグ(Tag)
  スター(Star/Bookmark)
  優先度(Priority)
 主観系属性
  タスクに対する所感や諸感覚
  難易度(Difficulty)
  ストレス(Stressfulness)
  やりたさ(Wantability)
  重要度(Importance)
 協調系属性
  タスクに紐づいた人([プロジェクトタスク管理]において必要)
  担当者(Assignee)
  発行者(Owner)
  購読者(Watcher/Subscriber)
  貢献者(Contributor)

記述系属性
 タスクの内容を表現する。
 言葉を用いたものだけ扱う。
  「言葉を用いないタスクがあるのか？」と思うかもしれないが、ある。[物タスク]などビジュアルで内容を表現（というより想起）するものがそうである。が、デジタルのタスク管理ツールとしてはまだ存在しないだろう（アイコンや背景などアイキャッチやカスタマイズ用途で画像をサポートしたものならある）。逆にアナログの場合は既に存在する。たとえばゴミ捨てというタスクを表現するのに、ゴミ袋を玄関に置いておくことが考えられる。これはゴミ袋という物タスクを扱っていると言える。
 ---
 名前
  タスク名、タスクの名前、Name、Title、Caption
  最もよく使われる属性であろう。タスクについて表現する場合、たいていは何らかの言葉を使うしかなく、しかしいちいち細かい諸々を書くのもだるいから、端的な名前だのタイトルだのをつける。それがこれである。
  小さなツールだと記述系属性はこれだけになる。逆にプロジェクトタスク管理など本格的なツールであれば、後述する詳細属性も使われることが多い。
  一行レベルの端的なテキストであることが多い。フォーマットは基本的にフリーだが、文字数制限をかけられている場合が多い。この文字数制限が緩いと、詳細属性としても使えるポテンシャルも出てくる。たとえば2000文字まで書けるとしたら、詳細なコンテキストも一通り書けよう。無論、UI は一行入力ボックスなどであろうから、書きづらい・読みづらいことこの上ないが。
  他の属性も記せるようにしたものもあり、[プレーンテキストタスク管理]でよく見られる。[Tritask]や[todo.txt]がそうであろう。Tritaskでは`rep:1`と書けば「毎日繰り返す」というルーチンタスク設定をなるし、todo.txtでは`+ABC案件`というラベルを書ける。どちらも、タスク名の任意の位置に書ける。`買い物をする rep:1`でも`rep:1 買い物をする`でも良いわけだ。
 詳細
  タスクの詳細、内容、概要、Description、Overview
  これも最も使われる属性の一つであろう。というのも、現代人には[題名指向]があり、名前属性は「ただの題名」としてのみ使うのが常識となっている（疑うことさえしない人も多い）。となると詳しい内容が書けないから、もう一つ属性を設ける必要がある。それがこの属性だ。
  複数行を書くことのできるテキストエリアとして実装されることが多い。本格的なツールだと[Markdown]などの記法もサポートし、見出しや文字装飾やリンクや画像といったものも差し込める。タスク管理には過剰に思えるが、プロジェクトタスク管理の文脈だと他メンバーに専門的なことを伝える必要性が多いため重宝しがちだ。
  [Wiki]やアウトライナーなどのライティングシステムをタスク管理として（あるいは「しても」）使った場合、属性が「詳細」のみのタスク管理ツールになることもありえる。このような世界観では、下手に属性で管理することよりも、とにかく本文を書くことを有線する。文章や言葉の力に頼るわけだ。2022/09 現在、このような潮流は少し出ており、たとえば倉下忠憲が[文芸的タスク管理]という言葉を使っている。

状態系属性
 タスクの状態を表現する。
 状態として最もわかりやすいのは「終了」であろう。タスクはそもそも終わらせるものであり、終わらせたら用済みとなる。よって、終了かどうかという状態を設け、終了したタスクを用済みする（たとえば非表示にする）のだ。そうすれば、終わっているタスクと終わっていないタスクが混在して見づらい、なんてこともなくせる。常にまだ終わっていないタスクだけを表示できる（もっと言えば「ここの表示をゼロにすれば全部終わり」という目標をつくれる）。

状態
 状態、ステータス、終了、完了、Status、Completion、Done
 状態系属性に含まれる属性は、この状態属性だけである。
 状態が取りうる値の種類は2種類(2値)か、3種類(3値)である。4種類以上のツールがあった場合、それは状態ではなく疑似状態である。他の属性（たとえばラベルのような分類系属性）を使って、擬似的に状態を表現しているにすぎない。また、1状態というケース（つまり状態がない）もありえない。タスクである以上、終わりはあるので、少なくとも2値にはなる。
 どのような状態の種類を持っているかを状態の体系という。例を挙げる。
  2値。完了、未完了
  3値。未着手、開始、終了
  本質的には、2値は「終わったかどうか」を表し、3値は「まだ手を付けてない」「手を付けた」「終わった」を表す。
  ただ、ツールや人によって言い方が変わってくるだけである。たとえば未完了だったり未着手だったりするし、開始だったりオープンだったりするし、終了だったりクローズだったりDoneだったりCompletedだったりするし、進行中だったり着手中だったりStartingだったりDoingだったりする。
  そういう意味で、状態の体系とは言い回しの流儀にすぎないと言ってもよかろう。

識別系属性
 タスク個々を識別する。
 いわゆるIDの概念である。もしタスクを識別できないと「買い物をする」「買い物をする」という、字面上は同じタスクを区別できない。もちろん最終的には（たとえば実行日属性などで）いつやるかが分かれるなどするであろうが、作業中、複製しただけだと純粋に同じタスクが2つできることもある。このような場合でも両者を区別できる必要がある。
 ただし、見てのとおり、実装上の都合（プログラムの内部的な事情）でしかないため、通常ツールの利用者が意識することはないだろう。しかし[TaskChute]では各タスクに番号があり、しかも表示順に絡んでもいるから利用者は意識させられる。また[Redmine]や[GitHub Issues]などチケットベースのツールでは、`#11`のように番号名で当該タスクを参照する機能を持っていたりもする。この場合も、やはり意識せねばなるまい。
 見かけ上はIDが存在していないように見えても、実質存在していると言える。たとえば[Tritask]はタスクのIDを持たないが、各タスクは行数で特定できるため、行番号が（実質的に）IDになっていると言える。

ID
 ID、識別子、番号、No、Number
 識別系属性に含まれる属性は、このID属性だけである。
 IDとして使われるものは主に以下のとおり。
  番号。1,2,3……と連番で続いていく。
  ランダム文字列。機械的に生成されたランダムな文字列。たとえば`iVraQQWkMiDM`や`qGNTb5`など。
  名前。たとえばファイルシステムで1ファイル1タスクで運用した場合はこれになるであろう。この場合、タスクの識別はタスク名（ファイル名）によって行われる。
 ID属性は基本的に操作できない。ツール上でタスクをつくると、勝手にIDが振られている。内部的に区別がつくようになっているだけで、利用者が直接IDの値を変えることはできない。例外は[TaskChute]であろう。これは辞書順降順でタスクを並べる仕様になっており、タスクの先頭フィールドがID（というより番号）になっているため、上に持っていきたいタスクのNoを小さくする、といった形で並び替えを行うことになる。

日付系属性
 タスクに紐づいた日付を表現する。
 人の営みと時間は切っても切り離せない。人の営みは時間に基づいており、もっというと時刻と日付に従っているところがある。時刻は後述するとして、ここでは日付の方を扱いたい。人は日単位で活動と休眠を行う生き物であり、社会もその前提で動いているため、タスクを日単位で分割して扱うとなにかと都合が良い。
 日付系属性は大別すると2種類――過去を記録するものと未来の目標を示すものがある。前者については、純粋に記録（[ログ]）として役に立つ。後者については、いつやるのか、あるいはいつまでにやらなければならないのかという目安を表現するのに重宝する。また、後者と前者を両方用いることによって、理想（目標）と現実（実際の記録）のギャップを計測することもできる。もっと言えば計画とその進捗管理という営為に持ち込むことができる。プロジェクトタスク管理においては事実上欠かせない概念であろう。
 この属性との付き合い方は4通り考えることができる。
  1 使わない
  2 過去だけ使う
  3 未来だけ使う
  4 両方使う
  自分、あるいは自分のシチュエーションにあったものを選ぶと良い。仮にツールが4であっても、2や3で済むのであればそれだけ使えば良い。逆に、4がしたいのに、ツールが2や3しかサポートしていない場合は、4が使えるツールに移行した方が良かろう。もちろん、番号が多くなるほどツールも複雑になりがちであり学習と運用のコストが高くなる。
 ちなみに曜日は管理しなくてもよい。日付が決まれば自ずと計算できるからだ。しかし、[曜日は表示しておくと認知資源が減る]のも事実であり、好みが分かれよう。私は表示したい派であるため、拙作[Tritask]でも表示させている。表示する場合、`(月)` `月` `月曜日` `Monday` `mon` `MON` `mo` などバリエーションが多数あり、こちらも好みが分かれる。賢いツールならカスタマイズできるようになっているだろう。

実行日
 実行日、開始日、Execution Date
 そのタスクをいつ実行するかを表現する。たとえば`2022/09/11 自転車修理`とあれば、この自転車修理というタスクは2022/09/11に行うつもりだとわかる。
 この属性は日付系属性における最重要概念であり、[デイリータスクリスト]を実現するのに必要である。この属性があれば、タスク達を今日と明日以降に分けることができる。そして今日は、実行日が今日となっているタスクだけをやればよい。こうすれば毎日「今日はここにあるタスクを全部やればいい」というゴールが設定され、メリハリがつく。他のタスクは明日以降の方に先送りされているので、また明日確認すれば良い。
 本格的に使えば、より強い先送りが手に入る。たとえば2022/09/19に行うべきタスクAがあるとしたら、Aの実行日を2022/09/19に設定しておけばよい。これだけで2022/09/19当日にAが（デイリータスクリストとして）見えるようになる。あなたは毎日、目に見えるタスクを処理するだけで済み、2022/09/19にAを置いたという事実など忘れても良い（2022/09/19になればどうせ出てきて思い出せる）。もちろん、これを実現するにはツールに相応の能力が必要だし、あなた自身もデイリータスクリストを真面目に運用しなければならない（少なくとも毎日何回も見る＆空にする程度には）。
 ツール側に十分な俯瞰能力（表示の広さと動作の軽さ）がある場合、カレンダーの代替になるポテンシャルも秘めている。たとえば私は[予定リスト]という言葉で説明しているが、拙作[Tritask]をカレンダー代わりに使っている。タスク管理ツール上で、カレンダーさながら予定も管理できているわけだ。もっとも、このレベルになると相当マニアックであり人を選ぶ。そもそも予定は通常、カレンダーで管理するのが無難だ。

作成日
 作成日、Creation Date
 そのタスクをいつ作ったかを表現する。
 これはいわゆる投稿日時のようなもので、後でいつ作ったかを追えるようにするための記録でしかない。正直なくても問題ない属性であろう。少なくとも[個人タスク管理]では要らない。プロジェクトタスク管理では、チームという都合上、[証跡]は重要であるからとりあえず残すという意味で採用することも多い。というより、ツールの仕様として記録されるために事実上記録するしかない、が現実であろう。

締切日
 締切日、期限、Due Date、Expiration
 そのタスクをいつまでに終わらなければならないかを表現する。
 これもプロジェクトタスク管理用の属性であろう。チームプレイでは全体の整合のため、「この日までにこれとこれをやる」という形で直近のタスクを決める。あるいは諸事情で「この日までに "やらなければならない"」と圧がかかることもあろう。いずれにせよ、このタスクはこの日までやる、と区切りをつけるわけだ。その区切りを締切という。
 この属性は諸刃の剣であろう。というのも、たいてい、タスクとその締切は正しいとは限らないのに、締切日を守ることに過剰に注力しがちだからである。本懐はプロジェクトの成功であり、タスクの締切やタスクそのものが違う場合は修正すべきであろう。だのに、目の前のタスクを終わらせること自体が目的となってしまう。典型的な[手段の目的化]と言えよう。しかしながら、締切日がないとしまりがつかず、いつまでも終わらないタスクがぽつぽつ出始めて形骸化に向かっていく。そもそも、締切日を設定したところで守られるかというと、そうでもなく、結局フォローが必要なのである。とはいえ、管理する側としては「締切を超えないようにする」というルールだけで動けば良く、楽だったりする。そういう意味で、この属性は管理者（タスクを遂行する人達を管理する者）向けと言える。
 個人タスク管理においては、おそらく必要がない。締切を意識して計画的に行動できる者はそもそもこんな属性に頼らずともコントロールできるし、逆にそうじゃない者はこの属性があったところでどうせ忘れるか、[学生症候群]で当日慌てるだけである。だったらカレンダーとリマインダーを駆使して、雑に（しかし高頻度であるべきだ）俯瞰しつつ想起させてやれば良い。
 締切という概念は誰もが知っており、身近でもあるため、この属性を見ると人は使いたがる。しかしその実、あまり役に立たず、この属性は管理コストばかりいたずらに引き上げる。よって、この属性は、まずは使わずにやってみる、くらい思い切るのが良いだろう。あるいは[締切タスク]も検討してみるとよい。ただしルールや慣習として「管理すること自体が大事なのだ」という世界観が敷かれている場合は、おそらく抗えず、必ず使う（使わされる）ことになるだろう。タスク個々に締切を設定することを是とする宗教信者は非常にありふれている。

 開始日
 締切日(Due/Expiration)
 完了日(Completion)

時刻系属性
 タスクに紐づいた時刻または時間帯
 開始時間(Start)
 終了時間(End)
 [セクション](Section)
 見積時間(Estimate/Expect)
 実績時間(Actual)
定期系属性
 ルーチンタスクに紐づいた出現頻度設定
 繰り返し頻度(Frequency)
 繰り返し条件(Condition)
分類系属性
 タスクの性質(ラベルの形で1つまたはnつ付与されたもの)
 カテゴリー(Category)
 ラベル(Label)
 タグ(Tag)
 スター(Star/Bookmark)
 優先度(Priority)
主観系属性
 タスクに対する所感や諸感覚
 難易度(Difficulty)
 ストレス(Stressfulness)
 やりたさ(Wantability)
 重要度(Importance)
協調系属性
 タスクに紐づいた人([プロジェクトタスク管理]において必要)
 担当者(Assignee)
 発行者(Owner)
 購読者(Watcher/Subscriber)
 貢献者(Contributor)

---
[属性 - タスク管理の体系化 https://scrapbox.io/sta-taskmanagement/%E5%B1%9E%E6%80%A7]
属性一覧
 [名前]
 [内容]
 [状態系属性]
  [状態]
  [スキップ状態]
 [識別子属性]
  [番号]
 [日付系属性]
  [実行日]
  [予定日]
  [作成日]
  [締切日]
  [完了日]
 [時刻系属性]
  [見積時間]
  [開始時間]
  [終了時間]
  [実績時間]
  [セクション]
  [締切時間]
 [繰り返し系属性]……[定期性]に関する属性
  [繰り返し頻度]
  [繰り返し条件]
   [繰り返し回数]
   [繰り返し期限]
   [繰り返し曜日]
 [分類系属性]……[フィルタリング]を想定しているもの
  [カテゴリ系属性]……1個の値のみ設定できるもの
   [スター]
   [プロジェクト]
   [優先度]
   [モード]
   [顧客]
   [マイルストーン]
  [タグ系属性]……n個の値を設定できるもの
   [コンテキスト]
   [ラベル]
   [タグ]
 [難易度]
 [ストレスフルネス]
 [ウォンタビリティ]
 [実行後属性]
  [評価]
  [所感]
 [実行中属性]
 [プロジェクトタスク管理]用
  [担当者]
  [購読者]
[メタ属性]
