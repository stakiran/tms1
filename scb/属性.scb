タスクの属性とは、タスクが持つ特徴である。
ただし関係と機能は含めない
 →[タスクを構成する3つのA]

属性の概要
 まずは例を挙げよう。
  「9月9日に行いたい、30分くらいかかる買い物」というタスクがあったとしよう。
  このとき、以下はいずれも同じ表現である。
   買い物
   2022/09/09 買い物
   買い物 2022/09/09
   2022/09/09 買い物 ~30
  それぞれ以下の属性を持っていると言える。
   >買い物
    名前
   >2022/09/09 買い物
    実行日、名前
   >買い物 2022/09/09
    名前、実行日
   >2022/09/09 買い物 ~30
    実行日、名前、見積時間（30分くらいかかる、の意）
 属性とは、タスクをタスク管理ツールで扱うために、タスクから切り取った特徴である。
 切り取り方は色々ある。
  「買い物」は名前だけを切り取っており、最もシンプルであろう。いわゆるTODOリストもこれである。が、既にご存知のとおり、これだけでは多数のタスクを管理できない。
  では「2022/09/09 買い物」はどうか。実行日（そのタスクを行う日）という形で「いつ行うか」を切り取ったのは賢いと言えよう。これなら、仮にタスクが100個あったとしても何とかなりそうだ。というのも、今日は実行日が今日になっているタスクだけ済ませれば OK だからである（つまり[デイリータスクリスト]の概念を実現できる）。もちろんその今日のタスクが100個だったらどうしようもないが、7個とか10個とかなら、まだ何とかなるのではないか。ちなみに「買い物 2022/09/09」も同じであるが、ただ属性の順番が違うだけである。どちらでも良いが、たとえば[プレーンテキストタスク管理]と相性が良いのは前者（日付が先）であろう。並び替えを行えば日付順で綺麗に並んでくれるからだ。
  もう一つ、「2022/09/09 買い物 ~30」は、属性が3つもある。「何分くらいかかりそうか」という特徴も切り取っていることがわかる。このような属性は見積時間とか見積と呼ぶ。何分かかるかを見積もっているわけだ。これも実行日と同様、タスクが多数存在擦る場合に便利となる。たとえばあなたに26分のスキマ時間が出来たとする。タスクの一覧を見て、26分に収まる（見積の合計が26分以下）ように選べば良い。もちろん見積どおりに終了できるとは限らないが、何もないよりは読みやすい。そういうタスク管理を続けていけば、見積の精度も上がるだろう。
 このように、どんな属性を採用するかによって、タスクの扱いやすさが異なってくる。属性があればあるほど「扱い方の多様性」も広がるわけだが、一方で、多機能すぎてごちゃごちゃするリスクも孕んでいる。そもそもツールというのはよく使う部分とそうでないものが出てくるものであり、無闇に属性を増やすのは得策ではない。心は踊るかもしれないが、管理には何ら貢献しない。
  もちろん、明確な設計思想があって、あえて多くの属性を採用したツールもある。たとえば[TaskChute]はそうであろう。いちいちあれもこれも記入させられて非常に面倒くさいが、その代わり、自分の生活のほぼすべてを記録に残すことができる。苦しんだ見返りとして、自分の行動を客観的データとして残せるのである。データが残れば考察ができる。分析ができる。作戦を立てることもできよう。闇雲ではなく、たしかなデータに基づいた改善に着手できるのである。
  あるいは、色んな人の色んな用途を想定するために、あえて多機能にして間口を広げているケースもある。[GitHub Issues]はそうであろう。これはプログラマ向けの課題管理ツールであるが、担当者、ラベル、プロジェクト、マイルストーンといった属性がサポートされている。ラベルを使えば好きなタグを運用できるし、「誰が」基点で管理したいなら担当者が使えようし、もちろんラベルと担当者を組み合わせても良い。ラベルが要らないなら使わなければ良い。他にも、ビジネスで使われる本格的なツールはこの傾向が強い。仕事は本質的に複雑であり、これと向き合うためには色んな観点が要るものなのだ。少量の属性を採用したスマートなツールだけでどうにかなるほど、ビジネスは甘くない。もっと泥臭いのだ。泥臭く使えるポテンシャルが要るものなのだ。
 タスク管理ツールに慣れたければ、属性に注目すると良い。
  ここまで述べたように、タスク管理ツールとはタスクの特徴を属性という形で切り取ったものだ。属性を見れば、そのツールがどういうコンセプトで何をしようとしているかがわかるであろう。あなたはその匂いや雰囲気に従えば良いし、そんな素直な歩み寄りは、理解や習熟を早めてくれる。
  あるいは、一見すると多機能で意味不明なツールであっても、「私はとりあえずこれが使えればいいや」と取捨選択できるようになる。多機能で人気のツールは、やはり出来が良いから、多機能すぎてよーわからんと捨てるのはもったいない。

属性の大別
 大別の名前、概要、一例を与える。
 ---
 記述系属性
  タスクの内容(言葉で記述されているもの)
  名前(Name/Title)
  詳細(Description)
 状態系属性
  タスクの状態
  状態(Status)
 識別系属性
  タスク個々を区別するための情報
  ID
  番号(No/Number)
 日付系属性
  タスクに紐づいた日付
  実行日(Execution)
  作成日(Creation)
  締切日(Due/Expiration)
  完了日(Completion)
 時刻系属性
  タスクに紐づいた時刻または時間帯
  開始時間(Start)
  終了時間(End)
  [セクション](Section)
  見積時間(Estimate/Expect)
  実績時間(Actual)
 定期系属性
  ルーチンタスクに紐づいた出現頻度設定
  繰り返し頻度(Frequency)
  繰り返し条件(Condition)
 分類系属性
  タスクの性質(ラベルの形で1つまたはnつ付与されたもの)
  カテゴリー(Category)
  ラベル(Label)
  タグ(Tag)
  スター(Star/Bookmark)
  優先度(Priority)
 主観系属性
  タスクに対する所感や諸感覚
  難易度(Difficulty)
  ストレス(Stressfulness)
  やりたさ(Wantability)
  重要度(Importance)
 協調系属性
  タスクに紐づいた人([プロジェクトタスク管理]において必要)
  担当者(Assignee)
  発行者(Owner)
  購読者(Watcher/Subscriber)
  貢献者(Contributor)

記述系属性
 タスクの内容を表現する。
 言葉を用いたものだけ扱う。
  「言葉を用いないタスクがあるのか？」と思うかもしれないが、ある。[物タスク]などビジュアルで内容を表現（というより想起）するものがそうである。が、デジタルのタスク管理ツールとしてはまだ存在しないだろう（アイコンや背景などアイキャッチやカスタマイズ用途で画像をサポートしたものならある）。逆にアナログの場合は既に存在する。たとえばゴミ捨てというタスクを表現するのに、ゴミ袋を玄関に置いておくことが考えられる。これはゴミ袋という物タスクを扱っていると言える。

名前
 タスク名、タスクの名前、Name、Title、Caption
 最もよく使われる属性であろう。タスクについて表現する場合、たいていは何らかの言葉を使うしかなく、しかしいちいち細かい諸々を書くのもだるいから、端的な名前だのタイトルだのをつける。それがこれである。
 小さなツールだと記述系属性はこれだけになる。逆にプロジェクトタスク管理など本格的なツールであれば、後述する詳細属性も使われることが多い。
 一行レベルの端的なテキストであることが多い。フォーマットは基本的にフリーだが、文字数制限をかけられている場合が多い。この文字数制限が緩いと、詳細属性としても使えるポテンシャルも出てくる。たとえば2000文字まで書けるとしたら、詳細なコンテキストも一通り書けよう。無論、UI は一行入力ボックスなどであろうから、書きづらい・読みづらいことこの上ないが。
 他の属性も記せるようにしたものもあり、[プレーンテキストタスク管理]でよく見られる。[Tritask]や[todo.txt]がそうであろう。Tritaskでは`rep:1`と書けば「毎日繰り返す」というルーチンタスク設定をなるし、todo.txtでは`+ABC案件`というラベルを書ける。どちらも、タスク名の任意の位置に書ける。`買い物をする rep:1`でも`rep:1 買い物をする`でも良いわけだ。

詳細
 タスクの詳細、内容、概要、Description、Overview
 これも最も使われる属性の一つであろう。というのも、現代人には[題名指向]があり、名前属性は「ただの題名」としてのみ使うのが常識となっている（疑うことさえしない人も多い）。となると詳しい内容が書けないから、もう一つ属性を設ける必要がある。それがこの属性だ。
 複数行を書くことのできるテキストエリアとして実装されることが多い。本格的なツールだと[Markdown]などの記法もサポートし、見出しや文字装飾やリンクや画像といったものも差し込める。タスク管理には過剰に思えるが、プロジェクトタスク管理の文脈だと他メンバーに専門的なことを伝える必要性が多いため重宝しがちだ。
 [Wiki]やアウトライナーなどのライティングシステムをタスク管理として（あるいは「しても」）使った場合、属性が「詳細」のみのタスク管理ツールになることもありえる。このような世界観では、下手に属性で管理することよりも、とにかく本文を書くことを有線する。文章や言葉の力に頼るわけだ。2022/09 現在、このような潮流は少し出ており、たとえば倉下忠憲が[文芸的タスク管理]という言葉を使っている。

状態系属性
 タスクの状態を表現する。
 状態として最もわかりやすいのは「終了」であろう。タスクはそもそも終わらせるものであり、終わらせたら用済みとなる。よって、終了かどうかという状態を設け、終了したタスクを用済みする（たとえば非表示にする）のだ。そうすれば、終わっているタスクと終わっていないタスクが混在して見づらい、なんてこともなくせる。常にまだ終わっていないタスクだけを表示できる（もっと言えば「ここの表示をゼロにすれば全部終わり」という目標をつくれる）。

状態
 状態、ステータス、終了、完了、Status、Completion、Done
 状態系属性に含まれる属性は、この状態属性だけである。
 状態が取りうる値の種類は2種類(2値)か、3種類(3値)である。4種類以上のツールがあった場合、それは状態ではなく疑似状態である。他の属性（たとえばラベルのような分類系属性）を使って、擬似的に状態を表現しているにすぎない。また、1状態というケース（つまり状態がない）もありえない。タスクである以上、終わりはあるので、少なくとも2値にはなる。
 どのような状態の種類を持っているかを状態の体系という。例を挙げる。
  2値。完了、未完了
  3値。未着手、開始、終了
  本質的には、2値は「終わったかどうか」を表し、3値は「まだ手を付けてない」「手を付けた」「終わった」を表す。
  ただ、ツールや人によって言い方が変わってくるだけである。たとえば未完了だったり未着手だったりするし、開始だったりオープンだったりするし、終了だったりクローズだったりDoneだったりCompletedだったりするし、進行中だったり着手中だったりStartingだったりDoingだったりする。
  そういう意味で、状態の体系とは言い回しの流儀にすぎないと言ってもよかろう。

識別系属性
 タスク個々を識別する。
 いわゆるIDの概念である。もしタスクを識別できないと「買い物をする」「買い物をする」という、字面上は同じタスクを区別できない。もちろん最終的には（たとえば実行日属性などで）いつやるかが分かれるなどするであろうが、作業中、複製しただけだと純粋に同じタスクが2つできることもある。このような場合でも両者を区別できる必要がある。
 ただし、見てのとおり、実装上の都合（プログラムの内部的な事情）でしかないため、通常ツールの利用者が意識することはないだろう。しかし[TaskChute]では各タスクに番号があり、しかも表示順に絡んでもいるから利用者は意識させられる。また[Redmine]や[GitHub Issues]などチケットベースのツールでは、`#11`のように番号名で当該タスクを参照する機能を持っていたりもする。この場合も、やはり意識せねばなるまい。
 見かけ上はIDが存在していないように見えても、実質存在していると言える。たとえば[Tritask]はタスクのIDを持たないが、各タスクは行数で特定できるため、行番号が（実質的に）IDになっていると言える。

ID
 ID、識別子、番号、No、Number
 識別系属性に含まれる属性は、このID属性だけである。
 IDとして使われるものは主に以下のとおり。
  番号。1,2,3……と連番で続いていく。
  ランダム文字列。機械的に生成されたランダムな文字列。たとえば`iVraQQWkMiDM`や`qGNTb5`など。
  名前。たとえばファイルシステムで1ファイル1タスクで運用した場合はこれになるであろう。この場合、タスクの識別はタスク名（ファイル名）によって行われる。
 ID属性は基本的に操作できない。ツール上でタスクをつくると、勝手にIDが振られている。内部的に区別がつくようになっているだけで、利用者が直接IDの値を変えることはできない。例外は[TaskChute]であろう。これは辞書順降順でタスクを並べる仕様になっており、タスクの先頭フィールドがID（というより番号）になっているため、上に持っていきたいタスクのNoを小さくする、といった形で並び替えを行うことになる。

日付系属性
 タスクに紐づいた日付を表現する。
 人の営みと時間は切っても切り離せない。人の営みは時間に基づいており、もっというと時刻と日付に従っているところがある。時刻は後述するとして、ここでは日付の方を扱いたい。人は日単位で活動と休眠を行う生き物であり、社会もその前提で動いているため、タスクを日単位で分割して扱うとなにかと都合が良い。
 日付系属性は大別すると2種類――過去を記録するものと未来の目標を示すものがある。前者については、純粋に記録（[ログ]）として役に立つ。後者については、いつやるのか、あるいはいつまでにやらなければならないのかという目安を表現するのに重宝する。また、後者と前者を両方用いることによって、理想（目標）と現実（実際の記録）のギャップを計測することもできる。もっと言えば計画とその進捗管理という営為に持ち込むことができる。プロジェクトタスク管理においては事実上欠かせない概念であろう。
 この属性との付き合い方は4通り考えることができる。
  1 使わない
  2 過去だけ使う
  3 未来だけ使う
  4 両方使う
  自分、あるいは自分のシチュエーションにあったものを選ぶと良い。仮にツールが4であっても、2や3で済むのであればそれだけ使えば良い。逆に、4がしたいのに、ツールが2や3しかサポートしていない場合は、4が使えるツールに移行した方が良かろう。もちろん、番号が多くなるほどツールも複雑になりがちであり学習と運用のコストが高くなる。
 ちなみに曜日は管理しなくてもよい。日付が決まれば自ずと計算できるからだ。しかし、[曜日は表示しておくと認知資源が減る]のも事実であり、好みが分かれよう。私は表示したい派であるため、拙作[Tritask]でも表示させている。表示する場合、`(月)` `月` `月曜日` `Monday` `mon` `MON` `mo` などバリエーションが多数あり、こちらも好みが分かれる。賢いツールならカスタマイズできるようになっているだろう。

実行日
 実行日、開始日、Execution Date
 そのタスクをいつ実行するかを表現する。たとえば`2022/09/11 自転車修理`とあれば、この自転車修理というタスクは2022/09/11に行うつもりだとわかる。
 この属性は日付系属性における最重要概念であり、[デイリータスクリスト]を実現するのに必要である。この属性があれば、タスク達を今日と明日以降に分けることができる。そして今日は、実行日が今日となっているタスクだけをやればよい。こうすれば毎日「今日はここにあるタスクを全部やればいい」というゴールが設定され、メリハリがつく。他のタスクは明日以降の方に先送りされているので、また明日確認すれば良い。
 本格的に使えば、より強い先送りが手に入る。たとえば2022/09/19に行うべきタスクAがあるとしたら、Aの実行日を2022/09/19に設定しておけばよい。これだけで2022/09/19当日にAが（デイリータスクリストとして）見えるようになる。あなたは毎日、目に見えるタスクを処理するだけで済み、2022/09/19にAを置いたという事実など忘れても良い（2022/09/19になればどうせ出てきて思い出せる）。もちろん、これを実現するにはツールに相応の能力が必要だし、あなた自身もデイリータスクリストを真面目に運用しなければならない（少なくとも毎日何回も見る＆空にする程度には）。
 ツール側に十分な俯瞰能力（表示の広さと動作の軽さ）がある場合、カレンダーの代替になるポテンシャルも秘めている。たとえば私は[予定リスト]という言葉で説明しているが、拙作[Tritask]をカレンダー代わりに使っている。タスク管理ツール上で、カレンダーさながら予定も管理できているわけだ。もっとも、このレベルになると相当マニアックであり人を選ぶ。そもそも予定は通常、カレンダーで管理するのが無難だ。

作成日
 作成日、Creation Date
 そのタスクをいつ作ったかを表現する。
 これはいわゆる投稿日時のようなもので、後でいつ作ったかを追えるようにするための記録でしかない。正直なくても問題ない属性であろう。少なくとも[個人タスク管理]では要らない。プロジェクトタスク管理では、チームという都合上、[証跡]は重要であるからとりあえず残すという意味で採用することも多い。というより、ツールの仕様として記録されるために事実上記録するしかない、が現実であろう。

締切日
 締切日、期限、Due Date、Expiration
 そのタスクをいつまでに終わらなければならないかを表現する。
 これもプロジェクトタスク管理用の属性であろう。チームプレイでは全体の整合のため、「この日までにこれとこれをやる」という形で直近のタスクを決める。あるいは諸事情で「この日までに "やらなければならない"」と圧がかかることもあろう。いずれにせよ、このタスクはこの日までやる、と区切りをつけるわけだ。その区切りを締切という。
 この属性は諸刃の剣であろう。というのも、たいてい、タスクとその締切は正しいとは限らないのに、締切日を守ることに過剰に注力しがちだからである。本懐はプロジェクトの成功であり、タスクの締切やタスクそのものが違う場合は修正すべきであろう。だのに、目の前のタスクを終わらせること自体が目的となってしまう。典型的な[手段の目的化]と言えよう。しかしながら、締切日がないとしまりがつかず、いつまでも終わらないタスクがぽつぽつ出始めて形骸化に向かっていく。そもそも、締切日を設定したところで守られるかというと、そうでもなく、結局フォローが必要なのである。とはいえ、管理する側としては「締切を超えないようにする」というルールだけで動けば良く、楽だったりする。そういう意味で、この属性は管理者（タスクを遂行する人達を管理する者）向けと言える。
 個人タスク管理においては、おそらく必要がない。というのも、締切を意識して計画的に行動できる者はそもそもこんな属性に頼らずともコントロールできるし、逆にそうじゃない者はこの属性があったところでどうせ忘れるか、[学生症候群]的に当日慌てるだけである。だったらカレンダーとリマインダーを駆使して、雑に（しかし高頻度であるべきだ）俯瞰しつつ想起させてやれば良い。
 締切という概念は誰もが知っており、身近でもあるため、この属性を見ると人は使いたがる。しかしその実、あまり役に立たず、この属性は管理コストばかりいたずらに引き上げる。よって、この属性は、まずは使わずにやってみる、くらい思い切るのが良い。あるいは[締切タスク]も検討してみるとよかろう。ただしルールや慣習として「管理すること自体が大事なのだ」という世界観が敷かれている場合は、おそらく抗えまい。必ず使う（使わされる）ことになるだろう。タスク個々に締切を設定することを是とする宗教信者は非常にありふれている。あなたが勝つことは難しい。

完了日
 完了日、終了日、Completion Date
 そのタスクが完了（終了）した日を表現する。
 この属性は、プロジェクトタスク管理では（一応データとして見えないことはないが）活用はされない。終わったタスクに用は無いからである。ただし、締切日との差（締切からn日過ぎて終わった）を可視化すれば、仕事の遅い者を知ることができよう。
 この属性は、個人タスク管理ではサポートされることがある。たとえば[todo.txt]がそうだ。これは後の振り返りで役立てるためである。たとえば今日はn個のタスクを終わらせることができたとか、日ごとの終了数を可視化してみて傾向を調べるとか、あるいは「作成日と完了日の差」を求めてみて傾向を調べる（差の開いたタスクが多い場合、あなたはすぐには着手しないスロースタータータイプだと言える）、といったことが可能となる。もちろんツールが可視化機能をサポートしてない場合、あなたが自らプログラミングに勤しむことになる。いずれにせよ、意識が高いことに変わりはないので、単に終わらせられればいいとか[忘迷怠]を防げればいいという程度であれば、この属性は無視してよかろう。

時刻系属性
 タスクに紐づいた時刻または時間帯を表現する。ただし時間帯については[セクション]に譲るとして、ここでは時刻の方を取り上げよう。
 通常、タスクは日単位で扱うものである。時以下の単位では細かすぎるからだ。そもそも時単位については、カレンダーという優秀なツールがある。
 それでも時刻を扱うことには価値がある。いわゆる[タイムトラッキング]である。いつ、何に、どれだけ時間を費やしたのか。いつ始めて、いつ終わったのか。見込はどれくらいで、実際はどの程度だったのか（つまり見込との乖離はどのくらいか）――そういったことを事細かに記録し、自身の現状を定量的に把握するためには、時刻レベルでのデータが要るのだ。当然ながら、何度も何度も記録する操作を行うことになるため、利用者の負担も高い。ライフログであれば自動で記録もされようが、ものがタスク（≒言葉で表現された「やること」）である。[手作業から逃れることはできない]。[リスト駆動生活]は必須であろう。あるいは、タスク管理というより、純粋なタイムトラッキングツールや習慣トラッカーであれば、もっと楽に（それこそ普段使っているスマホでアプリを一つ追加する程度で）できようが。
 時刻系属性を使いこなす（際に挫折しない）コツは2点ある。
  1点目はタスクの操作、特に言語化と記入をできるだけ早く行うことだ。特に1日のすべてを可視化したいといった厳密なタイムトラッキングの場合、記入するタスク数はかなりの数になる。1日数十以上も容易く超えてこよう。100は、よほど細かくなければ超えないだろうが、50は珍しくない。記入に時間がかかればかかるほどもどかしく、面倒くさくなり、容易に挫折や手抜きに繋がる。数秒で記入できても決して早すぎることはない。
  2点目は、時刻の記入をできるだけ省力化することである。タイムトラッキングツールであればほぼ自動化されていようが、タスク管理ツールだとそうもいかないことがある（特にタイムトラッキングに寄っていないツールで自力で時刻系属性を扱いたい場合）。ここは絶対に妥協できない。0.1秒でも早く済ませるべきだ。時刻など手で打つものではない。人間は時刻の手打ちに耐え続けるほど強い生き物ではない。というより、意外と認知資源を食っているというべきだ。いくら手入力が早かろうと資源は食う。休憩時間にネットサーフィンしているようなものだ。
 日々の消化と記録の考察は分けて行った方が良い。考察とは、たとえば開始と終了の差や見積と実績の差を求める（そしてその値を見て考えたり判断したりする）ことであるが、これを普段のタスク消化時に行うと非常に[認知資源]を食う。唯一の例外は[マジでこのタスクたちをこの順番で終わらせないといけないシチュエーション]だが、そんな地獄は考えたくないのでこれ以上は割愛する。考察は、1日の終わりにするとか週末に今週分をまとめて行うといった形で、あとでまとめて行うのが良い。[GTDのレビュー]とは相性が良いであろう。ただし、慌ただしいシチュエーションの場合は日単位ではなく、もっと短い単位――[セクション]ごとに考察する必要があるかもしれない。もっと慌ただしいと、割愛したシチュエーションに近づいていく。もう一度言うが、非常に疲れるので、そんなシチュエーションを常態にしてはいけない。最低でも日単位で、まとめて考察が行える状態を日常にしたいところだ。
 ロストの対処も頭を悩ませるだろう。[ロストに対処するには]を参照されたい。
 [タイニータスク]の扱いにも頭を悩ませるだろう。しかしこれも対処は単純で、タスク管理ツールでは（時刻系属性を）扱わない――それだけだ。潔癖な人はつい扱いたくなるかもしれないが、扱っても邪魔だし、[管理コスト]も馬鹿にならない。1分で終わったタスクを記録するのに1分かかりました、そのようなタスクが何個も何個もあります、なんてことになりかねない。もちろん、タイニーであっても[忘迷怠]を防ぎたいなら管理すればいいが、時刻系属性はやりすぎである。

[セクション]
 セクション、時間帯、Section
 リンク先を参照。

開始時間
 開始時間、Start Time
 そのタスクを開始した時刻を表現する。
 よくある疑問として「[マルチタスク]にはどう対処すればいいか？」がある。つまり同時にnつのタスクを開始した場合に、どう操作すれば良いかという話であるが、答えは「諦めよ」である。そもそも[タイムトラッキングには「一度に一つのタスクだけ行う」という前提がある]。

終了時間
 終了時間、End Time
 そのタスクを終了した時刻を表現する。
 [報告的終了]を行う場合、しばしば[操作コスト]が問題になる。たとえば[Toggl]ではマニュアルモードが存在するが、これは開始時間を自分で記入しなくてはならない（厳密に言うと開始も終了も現在時刻となっており、終了時間や現在だから修正は不要で、開始の方を修正しなきゃいけないというシチュ）。ロストの対処については前述した（そもそもロストがなくなるようにしろ）が、現実的にはそうもいかない。どうするかというと、記入を効率化するしかない。Togglのように一部でも省力化されているツールを使うなり、時刻を一瞬で入力できるよう辞書登録や[Text Expansion]を使ったり、タイピングを練習したり、テンキーを導入したりするのも良い。特にタイピングやテンキーのくだりは馬鹿に聞こえるかもしれないが、[入力の効率化は大事だ]。あるいは[プレーンテキストタスク管理]などカスタマイズの余地が大きい場合は、自前で実装するのもアリだ。ちなみに[Tritask]では、まさにこの報告的終了を行う操作を用意しており、一発呼び出すだけで記入できるようになっている。

実績時間
 実績時間、実働時間、Actual Time
 そのタスクにかかった時間を表現する。終了時間と開始時間の差から求めることができる。
 誤差の累積に注意したい。たとえば開始も終了もhh:mmだった場合、実態は1分未満にもかかわらずツール上は0になってしまう。このようなタスクが10個あると、最大10分近くの誤差が生まれることになる。1日全体の振り返りで見れば大した差ではないが、これが「～～に関するタスク」などで絞ると、2分と見えているのに実態は8分、といった乖離が生じる。[ルーチンタスク管理]を本格的にやっていたり、[キャンセルタスク]が多かったりすると、本質を捉えづらくなる（左記の例で言うと本当は8分なのに2分しかかかってない、という誤解のまま過ごしてしまう）。

見積時間
 見積時間、Estimate Time、Expect Time
 そのタスクの予定消費時間を表現する。
 たとえば30分と設定した場合、そのタスクは「30分（くらい）で終わる」という意味になる。また、すべてのタスクにこの属性値を設定すれば、「それらタスクを合計するとどれくらいかかるか（かかる見込みなのか）」がわかる。[予実管理]が行えるわけだ。
 ルーチンタスクとも相性が良い。あなたは1日どれだけルーチンタスクに費やすことになるかがわかるし、実働時間と併せて、日々考察すれば「総時間をできるだけ減らす」「平準化する」といったコントロールもしやすくなる。たとえば私は「家事雑務は1日1h以内」を掲げ、[Tritask]で記録を取っては「ここが時間かかりすぎてるな」「これとこれはまとめて行った方がいいな」「これは今4日に1回だけど、10日に1回でも良さそうだな」といった調整をして、といったことを繰り返して達成することができた。
 中途半端に手を出すのが一番良くない。全く手を出さないか、全部に手を出すか（自分が扱うタスク全部に記入するか）、どちらかを選ぶべきである。というのも、中途半端に総見積時間を算出したところで使い道がないからだ。もちろん上述のとおり、ある種類のタスクにだけ全部つけるのならアリだ。いずれにせよ、もし手を出すのであれば、相応のコストは覚悟せねばならない。この属性に手を出すということは、実質実績時間とその考察にも手を出すことに等しい。あなたの、タスク管理に費やす時間は、おそらく30分は増えよう。己の予実管理と真面目に向き合うと、そのくらいはかかるものである。

定期系属性
 ルーチンタスクに紐づいた出現頻度を表現する。
 そもそも[ルーチンタスク]をどうやって実現するのかというと、単にタスクを指定頻度で出現させるだけである。たとえば毎日行うタスクAは「1日に1回」出現させれば良い。Aを1日2回行いたいのなら、タスクAを2個つくれば良い。毎週月曜日と木曜日のゴミ捨てをルーチンタスク化したいなら、「毎週月曜日かつ毎週木曜日」のような設定になるだろう。あるいは毎週月曜日の「ゴミ捨て」タスクと、それを複製して出現頻度だけ「毎週木曜日」に変えた「ゴミ捨て」タスク、の2つをつくるかもしれない。いずれにせよ、ツール側では「指定頻度で出現させる」的な設定を入れるだけだ。もちろん、ツールがそのような設定能力を持つ必要がある。
  小難しい話をしているかもしれないが、このような仕組みの理解は必要である。というのも、タスク管理ツールは、人間ほど曖昧に頻度を扱えないからだ。人間に「3日ごとにやってね」と言えば、適当に計算して実現できるわけだが、機械はそうではない。ツールもだ。結局、ツール上でそういったことを実現するためには、ツール上の言葉（すなわち設定）で指定してやる必要がある。このとき、仕組みを理解していないと扱えない。
 頻度設定をどこまで柔軟に行えるかもツール次第となる。私がつくった[Tritask]は比較的ここがショボくて、「n日に1回」と「毎週xx曜日」しかない。なので月末日、みたいな指定は行えない。行おうとするなら「30日に1回」みたいなアバウトな指定になる。もちろん、「ある月の月末日から30日後」が翌月の月末日になるとは限らない（4月は30日だが、5月は31日だし、2月は閏年でさらにややこしい）。一方、月末日を綺麗に指定できるツールもある（[Outlook]などビジネスユース前提の多機能なツールなら基本的には備えていよう）。よって、あなたがルーチンタスク管理を行いたくて、あるいは乗り換えたくてツールを探している場合、まずはこの能力を見るべきだ。
 定期系属性がどう動作するかも見ておく必要がある。3種類ある。
  1 End and Set。[TaskChute]や[Tritask]の方式で、ルーチンタスクの実体はただ一つだけ存在し、それを終了したときに「次の」タスクをその都度生成するもの。メリットは変更のしやすさ（一つだけ存在しているそのタスクを書き換えるだけでいい）だ。デメリットは先の出現分布を俯瞰できないことであろう。たとえば4日に1回行うタスクAがあったとしても、Aは直近のもの一つしか存在しないため、カレンダーのように俯瞰して「Aはこの日のこの日にある」みたいなことを知ることができない。知りたいのなら手計算が必要だ。よって、[ワイドアプローチ]がしたい人には向かないかもしれない。
  2 Set all firstly。[Outlook]などスケジューラーが採用している方式で、End and Setとは違い、ルーチンタスクの実体が未来日以降にも事前につくられるもの。メリットは俯瞰できること。どの日に何のルーチンタスクがあるかを、カレンダービューなどから俯瞰できる。デメリットは頻度設定の変更が少し面倒くさいこと。「この日だけを消す」「この設定全体に適用する」のような二択を選ぶ、といった手間が生じる。些細な手間に見えるが、本格的にルーチンタスク管理している場合は（設定変更の機会も増えるため）非常に鬱陶しく感じる。
  3 Counter。[Habitica]が採用している方式で、その日にやった（タスクを終了した）かどうかだけを記録する。メリットは操作コストが非常に小さいこと（ボタンを押すだけである）。デメリットは頻度設定の融通が効かないこと。今のところ、この方式は「毎日行う日課や習慣」の管理に特化しており、用は「毎日行うルーチンタスク」しか扱えない。また[ログ]も残らないため振り返りがしづらい。ただし日単位で実施可否を見返す程度ならできることもある（というより習慣トラッカーの十八番であろう）。ただ時間単位の詳細――いつ始めていつ終わったのか等はわからない。……と、聞くと、ルーチンタスク管理としては弱そうに聞こえるが、案外そうでもない。特にルーチン[タイニータスク]の管理には重宝するだろう。
  ---
  どの方式も一長一短だが、クリティカルではない。その気になればどの方式でもルーチンタスク管理はできる。ただ、人によって合う合わないがあるので、可能なら自分にあった方式を選びたいところだ。ちなみに私は、ナローアプローチと迅速な修正を好むタイプなので断然 End and Set だ。

繰り返し頻度
 繰り返し頻度、間隔、パターン、Frequency、Interval、Pattern
 そのタスクの出現頻度を表現する。
 設定方式はいくつかある。
  1 Day Interval。n日に1回。
  2 WMY Interval。n週に1回、n月に1回、n年に1回。が、現実的に存在するのはW(eek)とM(onthly)までだろう。Y(early)はさすがに間隔が空きすぎており実用的でないため、あえてサポートしているツールは無かろう。
  3 DOW Interval。毎週xx曜日。DOWとはDay Of Week（曜日）のこと。
 いずれも間隔的（インターバル的）である。別の言い方をすれば機械的であり、単純なロジックであるとも言えよう。実際、内部の計算ロジックは、単にnを足すだけである。曜日についても、7日ごとに繰り返すものなので7を足すのみ。よって、繰り返し頻度属性では望みの頻度を表現できないことがある。たとえば右記は表現できない――平日のみ毎日。休日のみ毎日。休日（土日+祝日+会社特別休日）のみ毎日。毎月第二月曜日。月末日。
  このような複雑な頻度（複雑な意味を持つ頻度ということで [Semantic Interval] という）を表現したければ、後述の繰り返し条件属性を使う必要がある。
 [プレーンテキストタスク管理]でルーチンタスク管理をしたい場合、おそらくこの属性だけを使うことになるだろう。というのも、後述の繰り返し条件属性は、GUI（画面によるUI）でなければ設定しづらいからである。よって、プレーンテキストで実現したい場合、Semantic Interval は、他の原始的な Interval でカバーすることになろう。たとえば私は[Tritask]において、[月末日を表現するのに「27日に1回」を使っている]。もちろん、そもそも素直に GUI のツールを使えば、こんな小細工に悩む必要はない。あるいは[プレーンテキストベースでも Semantic Interval を扱えるようにする]と良いのだろう。
 小難しく書いているが、本質はシンプルである。
  繰り返し頻度属性は、単純な繰り返しパターンのみ対応できる。
  単純な分、扱いやすく、実装もしやすいが、表現できるパターンにも限りがある。
  特に[Semantic Interval]の表現が難しい。小細工を頑張る羽目になる。
  小細工が嫌なら、後述の繰り返し条件属性を使うべし。

繰り返し条件
 繰り返し条件、パターン、Condition、Pattern。
 そのタスクの出現頻度を表現する。
 繰り返し頻度属性よりも柔軟に指定でき、[Semantic_Interval]にも対応している。その本質は「このような性質を持つ日だったら、出現させる」である。条件に当てはまるかどうかを見ているわけだ。
 限界指定にも対応していることがある。具体的には「n回分だけ出現する」のような回数指定、「何月何日までは～～の頻度で繰り返す」のような期限指定などがある。
 この属性を設定する手段は、おそらく[GUI]になるだろう。それもフォームが色々並んでいるような、煩雑な見た目になる。この属性が、それだけ本質的に複雑であることを意味している。とはいえ慣れの問題であるため、LD（算数障害）など障害者でもなければ適応はできよう。ただ、それでも、[ルーチンタスクを育てる]用途には向いていない。頻度設定を変えるのがいちいち面倒だからだ。とはいえ、個人の日常生活ならさておき、仕事であれば「育てるまでもなく決められている」も多いだろう。その場合は、単に[忘迷怠]を防げればいいので、むしろこの属性を使ってでも確実に仕込みたい。煩雑でも、面倒くさくても、忘れる怠ける迷うよりはマシだ。
  まあ私であれば、そもそもそういう生き方が嫌なので[盤外戦]で抗うだろうが（苦笑）
  ちなみに、この属性が必要なほど忙しい人は、おそらくカレンダーを使うことになる。言われるまでもないだろうが。タスク管理というより予定管理、スケジュール管理の世界の住人になっているわけだ。

分類系属性
 タスクの性質を表現する。特に後から[フィルタリング]する目的で付与する（される）もの。
 この手の言葉は多数存在し、たとえば右記がある――フォルダ。プロジェクト。カテゴリー。ラベル。タグ。ブックマーク。スター。優先度。
 この属性は、ツールによって使っている言葉が違う。あるツールにおける「タグ」と、別のツールにおける「タグ」が同じとは限らない。しかし、この属性はタスク管理の主役でもあるから、たいていのツールが何かしら備えている。タスク管理を行う以上、必ず目にすることになるだろう。よって、混乱してしまう前に、あなたが使っているツールの用語（定義や意味）を確認しておくのが良い。
 分類という言葉の意味も押さえておくべきだ。さきほど例として「優先度」を上げたが、これについてはどう思われただろうか？「分類なのか？」と思ったのではないだろうか。意外かもしれないが、優先度も分類だ。分類の本質は、観点の付与とフィルタリングである。優先度は、後から「優先度=高、だけ表示」みたいなことができる。ゆえに分類と言える。もっと言えば、そういうことができるものは、何であれ分類と言えるのだ。ただし、分類以外の便宜を提供するものは、分類系属性ではない。たとえば日付系属性や時刻系属性は、「2022年7月のタスクだけ表示」「14時台に終了したタスクだけ表示」といった形でフィルタリングできるわけだが、そもそも実行日や開始時間といった便宜の提供がメインである。よって分類系属性ではない（分類の便宜「も」持っているという言い方になる）。……と言うと、言葉遊びのようでうんざりするかもしれないが、大事なことだ。というのも、後でフィルタリングしやすいのは分類系属性（純粋に分類の便宜のみを持つ属性）だからだ。[分類の便宜「も」持つ属性では、実はフィルタリングはあまり機能しない]ことがわかっている。
 非常に紛らわしいのだが、この属性は「関係」とは関係がない。たとえばタスクAが、プロジェクトABCの仕事だからといって「ABC」カテゴリーをつけたとしても、これは関係を定義しているのではなく、単に「ABC」という分類項目をつけているだけである（ただし論理的には「AはABCに属する」という関係が事実上存在している）。
  関係についてはこちら →[タスクを構成する3つのA]
 この属性において外せない便宜の一つは視覚的強調であろう。このタグがついたタスクはこの色で表示、みたいな視覚効果があると、俯瞰時も非常に見やすい。タスク管理はただでさえ文字の世界になりがちなので、視覚効果に頼って負荷を減らすのは良い戦略であろう。もちろん、色使い次第ではかえってチカチカして疲れてしまったり、見栄えの洗練に入れ込んでしまったり（[手段の目的化]）するため諸刃の剣でもある。

カテゴリー
 カテゴリー、フォルダ、プロジェクト、Category、Folder、Project。
 タスクに1つだけ付与できる分類項目である。
 事実上、関係も表現できる。たとえばプロジェクトABCを示す "ABC" カテゴリーをタスクAに付与した場合、「AはABCの配下にある」と言えよう。あるいは「AはABCに関連するタスクである」と言えるかもしれない。階層関係にせよ、単なる依存関係にせよ、何らかの（というより何でも）関係を示せる。それだけに、つい関係を作り込むことに費やしがちだが、典型的な[手段の目的化]なのでハマりすぎないよう注意が要る。
 カテゴリーには、あなたの[責荷]を端的に反映すると良い。思いつきの項目ではなく、あなたが日常的に接している・抱えているものを反映することで、迷うことなく運用しやすくなり形骸化を防げる。個数は10以内、できれば5以内が良い。少なすぎると思うかもしれないが、欲張ってはいけない。欲張っても形骸化するだけだ。

タグ
 タグ、Tag。
 タスクに付与できる分類項目であり、カテゴリーとは違って2つ以上付与できる。
 カテゴリーが厳選された分類項目であるならば、タグは雑な分類項目である。とにかくたくさんつけておき、あとで探したときにヒットしたらラッキー、というものだ。ヒット率を上げることに主眼を置く。よって、1つのタスクに5個や10個を付けても問題はない。よく勘違いされがちだが、カテゴリーのように厳選しなくてもいい。思いつきをガンガンつけてしまえばいいのだ。多ければ多いほど、ヒット率も上がる。もちろん、タスクを付けるという[操作コスト]はかかるので、バランスではある。タグをつけるのに10分かかりました、はさすがにかかりすぎだろう（もし本当に重要なタスクであるならば、予定なりリマインダーなり別の手段を使って確実に仕込むべきだ）。
 理論上、分類系属性はこの属性で表現しきれる。よって、もしツールに所望の分類系属性がない場合、あなた自身が何らかの属性をつくって運用することができる。たとえばツールに優先度属性がない場合、あなた自身が「0～5の数字を使おう」「0は優先度なし」「5が一番高い」と決めて、実際に0とか2とか4とかをつけて運用することができよう。ツールに担当者属性がなく、かつパートナーのタスクも管理したくて、でもパートナーには直接触らせず管理は自分で行いたいという場合、タグとして「自分の名前」「パートナーの名前」をつくっておき、パートナーのタスクには後者のタグをつけて管理する（で、終わってないとかあれば催促しに行く）――なんてこともできる。

ラベル
 ラベル、Label。
 タスクに付与できる分類項目であり、機能的にはタグと同等だが、加えて視覚効果を持っている。具体的には文字色や背景色を設定できる。好例は[GitHub Issues]であろう。

スター
 スター、ブックマーク、ストック、Star、Bookmark、Stock
 タスクに付与できる分類項目であり、カテゴリーよりもシンプルなものである。取りうる値は2値であり、別の言い方をすれば「マークがついているかどうか」だ。フィルタリング時は「マークがついているもの」だけを表示する形となる。ツールによって、いろいろな名前がついているが、ブックマークやスターやストックといった名前であることが多い。
 スターは最もシンプルな分類項目である。特別目立たせたいものにマークを付けておくだけで良い。人によっては、このスターだけでタスク管理をまかなえてしまうこともある。が、実態としては複数の意味を持たせている（頭の中で処理している）――つまりカテゴリーになっていることも珍しくない。
 いわゆる[インボックス]として活用することもできる。よりカジュアルに言えば「あとで読む」であろう。スターをつけたものは「未処理」であり、後で処理をしたときにスターを外す。そうすれば「スターのついたタスクをゼロにする」という目標に向かって日々活動する、という明快な営為が手に入る。
 運用のコツはシングルパーパス（単一目的）だ。「あとで読む」「今日中に処理する」「私が持っているボール（なので誰かに渡すところまでやらなきゃいけない）」のように、何らかの目的をただ一つだけ定めるのである。よく陥りがちなのが、頭の中で複数の用途を使い分ける、であるが、これは[認知資源]に易しくない。そのうち[忘迷怠]が発生して形骸化してしまう。もちろん、何もしないよりは忘迷怠率を下げられるためマシではあるのだが、そんな中途半端なクオリティが通用するのは限定的（よほど個人的で重要でもない文脈か、自分の立場が強くて忘迷怠しても許されるか）であろう。

優先度
 優先度、Priority
 タスクに付与できる分類項目であり、そのタスクの優先度（優先的に取り組むべき度合い）を表現する。
 採用される値は人次第、ツール次第である。以下にいくつか例を上げる。
  0,1,2,3,4,5
  low, middle, high
  A,B,C, ..., Z
  高、中、低
 この属性は雑に扱いやすいため多用されるが、一方で形骸化しやすいものでもある。人によって解釈が異なるからだ。かといって、「優先度=高は～～という意味であり、～～の対処を～～のうちにしなければならない」みたいなルールを決めたところで、守られるはずもない。そして、普段守ることができても、忙しくなったり量が増えたりするとすぐに形骸化する。この属性が破綻することなく成立する唯一の条件は、全員が（個人タスク管理の場合は自分一人で良い）「優先度に従ってタスクを消化しまくる機械」となること（ならざるをえないシチュエーション）である。典型例は救急現場で使われる[トリアージ]であろう。対象が人命であろうと優先順位をつけ、四の五の言わずに行動し続ける――そんな世界と戦士であって、ようやく役に立つ。優先度とは本来そういうもの（Cruel and Busy）なのだ。よって、そういうシチュエーションでない平和な場所や、その気概を持てない軟弱者は、この属性は使わない方がいいし、使わないといけない状況であるなら外してもらった方が良い。
 優先度がどうしても必要な場合、序盤は定着しづらいため、優先度名をより具体的にすると良い。たとえば`0,1,2,3`よりも`0(いったん無視でいい)`とか`3(できれば一時間以内、最低でも今日中に)`の方がわかりやすい。また、タグよりもラベルを使って、視覚的にも強調できるとなお良い（高優先度は赤くするなど）。もう一つ、このようなことを決めるときに荒れがち（特に重箱の隅をつつくようなコメントをして「別に具体的にしなくても数字だけでいいだろ」に倒そうとする派がいる）という問題もあるが、それでも決めなくてはならない。優先度が必要なシチュエーションは、前述したようにCruel and Busy――残酷で慌ただしいのだ。明快な基準というものが絶対に必要である。たとえ上手い基準をつくれる自信や保証が無かったとしても、やらねばならない。個を殺し、基準という宗教に則った狂人と化す。そうすることでしか切り抜けられないシチュエーションも、別に珍しくはない。

主観系属性
 タスクに対する所感を表現する。
 この属性も本質的には分類系属性である。こうして別に扱っているのは、分類系属性の方で扱うとわかりづらいからだ。
 この属性の意義は、タスク管理に自分の実態――特に感情や精神やモチベーションといった機微を反映できるところにある。タスク管理というと、そういったものを度外視して利用者をタスク消化マシーンとみなしがちだが、当然ながら実際はそうではない。私たちは人間である。ゆえに、そういった実態も反映してやった方が、より使いやすく馴染みやすい管理になる。この属性は、その役に立つ。
 この属性によってできることは2点ある。
  1 迷をなくすため。たとえば2時間の空きが出来たとして、重要度の高いタスクAとそうでもないタスクB,C,Dがある場合、どのタスクをこなすべきであろうか？おそらくAであろう。これは、重要度という主観系属性を定義しているからこそ、できることだ。
  2 自分の限界を把握するため。たとえば各タスクに3段階のストレスを付与するとしよう（高、中、低）。加えて、あなたは1日におおよそ4つの高ストレスタスクをこなせるとしよう。5つ以上は不調になりやすい傾向があるとわかっている。この場合、あなたは「このタスクを今日やっちゃうと高ストレスが計4になっちゃうから、明日に回すか」みたいな判断ができるようになる。これは、あなたがストレスという主観系属性を定義し、運用し、その上で「自分はどこまで耐えられそうか」の体感を学んだからこそ実現できることだ。
  後者の2は、特に難しい。要するにHPやMPに相当するものを自分なりに体系化するということである。難しいのが、これをまがいなりにもできるようになれば、「HPヤバそうだから撤退する」みたいな、普段ゲームでやるような判断と行動を現実でも行えるようになる。非常に明快かつ迅速で、QoL上がること間違いなしだと考えられている。

 難易度(Difficulty)
 ストレス(Stressfulness)
 やりたさ(Wantability)
 重要度(Importance)
 創造性(Creativity)

協調系属性
 タスクに紐づいた人([プロジェクトタスク管理]において必要)
 担当者(Assignee)
 発行者(Owner)
 購読者(Watcher/Subscriber)
 貢献者(Contributor)

---
[属性 - タスク管理の体系化 https://scrapbox.io/sta-taskmanagement/%E5%B1%9E%E6%80%A7]
属性一覧
 [名前]
 [内容]
 [状態系属性]
  [状態]
  [スキップ状態]
 [識別子属性]
  [番号]
 [日付系属性]
  [実行日]
  [予定日]
  [作成日]
  [締切日]
  [完了日]
 [時刻系属性]
  [見積時間]
  [開始時間]
  [終了時間]
  [実績時間]
  [セクション]
  [締切時間]
 [繰り返し系属性]……[定期性]に関する属性
  [繰り返し頻度]
  [繰り返し条件]
   [繰り返し回数]
   [繰り返し期限]
   [繰り返し曜日]
 [分類系属性]……[フィルタリング]を想定しているもの
  [カテゴリ系属性]……1個の値のみ設定できるもの
   [スター]
   [プロジェクト]
   [優先度]
   [モード]
   [顧客]
   [マイルストーン]
  [タグ系属性]……n個の値を設定できるもの
   [コンテキスト]
   [ラベル]
   [タグ]
 [難易度]
 [ストレスフルネス]
 [ウォンタビリティ]
 [実行後属性]
  [評価]
  [所感]
 [実行中属性]
 [プロジェクトタスク管理]用
  [担当者]
  [購読者]
[メタ属性]
